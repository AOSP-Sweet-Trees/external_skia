load("//bazel:macros.bzl", "cc_library", "exports_files_legacy")

licenses(["notice"])

exports_files_legacy()

filegroup(
    name = "core_srcs",
    srcs = [
        "SkSLVMCodeGenerator.cpp",
        "SkSLVMCodeGenerator.h",
    ],
)

filegroup(
    # TODO(kjlubick) Could this be split up so we don't need to compile the SkSLMetalCodeGenerator
    # on platforms that don't support metal (e.g. WebGL, Linux)?
    name = "gpu_srcs",
    srcs = [
        "SkSLCodeGenerator.h",
        "SkSLGLSLCodeGenerator.cpp",
        "SkSLGLSLCodeGenerator.h",
        "SkSLMetalCodeGenerator.cpp",
        "SkSLMetalCodeGenerator.h",
        "SkSLPipelineStageCodeGenerator.cpp",
        "SkSLPipelineStageCodeGenerator.h",
        "SkSLSPIRVCodeGenerator.cpp",
        "SkSLSPIRVCodeGenerator.h",
        "SkSLSPIRVtoHLSL.cpp",
        "SkSLSPIRVtoHLSL.h",
        "SkSLWGSLCodeGenerator.cpp",
        "SkSLWGSLCodeGenerator.h",
    ],
)

filegroup(
    name = "srcs",
    srcs = [
        ":core_srcs",
    ] + select({
        "//src/sksl:use_sksl_gpu_srcs": [":gpu_srcs"],
        "//conditions:default": [],
    }),
    visibility = ["//src/sksl:__pkg__"],
)

cc_library(
    name = "deps",
    visibility = ["//src/sksl:__pkg__"],
    deps = select({
        "//src/sksl:use_sksl_gpu_srcs": ["//third_party:spirv_cross"],
        "//conditions:default": [],
    }),
)
