    1. store_src_rg                   pos = src.rg
    2. init_lane_masks                CondMask = LoopMask = RetMask = true
    3. zero_slot_unmasked             $6 = 0
    4. copy_slot_unmasked             kZero = $6
    5. copy_constant                  $6 = 0x41200000 (10.0)
    6. copy_slot_unmasked             kTen = $6
    7. copy_slot_unmasked             $6 = pos(0)
    8. copy_constant                  $7 = colorGreen(1)
    9. max_float                      $6 = max($6, $7)
   10. copy_constant                  $7 = colorGreen(3)
   11. min_float                      $6 = min($6, $7)
   12. copy_constant                  $7 = 0x40A00000 (5.0)
   13. mul_float                      $6 *= $7
   14. copy_slot_unmasked             five = $6
   15. store_condition_mask           $27 = CondMask
   16. store_condition_mask           $49 = CondMask
   17. store_condition_mask           $60 = CondMask
   18. store_condition_mask           $38 = CondMask
   19. store_condition_mask           $89 = CondMask
   20. store_condition_mask           $71 = CondMask
   21. store_condition_mask           $21 = CondMask
   22. store_condition_mask           $82 = CondMask
   23. store_condition_mask           $14 = CondMask
   24. store_condition_mask           $0 = CondMask
   25. branch_if_no_active_lanes      branch_if_no_active_lanes +34 (#59)
   26. store_return_mask              $1 = RetMask
   27. copy_slot_unmasked             $2 = five
   28. copy_slot_unmasked             five = $2
   29. copy_slot_unmasked             $2 = kZero
   30. copy_slot_unmasked             i = $2
   31. store_loop_mask                $2 = LoopMask
   32. jump                           jump +16 (#48)
   33. zero_slot_unmasked             [for-loop continue mask 0] = 0
   34. store_condition_mask           $3 = CondMask
   35. copy_slot_unmasked             $4 = i
   36. copy_slot_unmasked             $5 = five
   37. cmpeq_float                    $4 = equal($4, $5)
   38. merge_condition_mask           CondMask = $3 & $4
   39. copy_slot_unmasked             $5 = i
   40. copy_slot_masked               [return_loop].result = Mask($5)
   41. mask_off_return_mask           RetMask &= ~(CondMask & LoopMask & RetMask)
   42. load_condition_mask            CondMask = $3
   43. reenable_loop_mask             LoopMask |= [for-loop continue mask 0]
   44. copy_slot_unmasked             $3 = i
   45. copy_constant                  $4 = 0x3F800000 (1.0)
   46. add_float                      $3 += $4
   47. copy_slot_masked               i = Mask($3)
   48. copy_slot_unmasked             $3 = i
   49. copy_constant                  $4 = 0x41200000 (10.0)
   50. cmplt_float                    $3 = lessThan($3, $4)
   51. merge_loop_mask                LoopMask &= $3
   52. stack_rewind
   53. branch_if_any_active_lanes     branch_if_any_active_lanes -20 (#33)
   54. load_loop_mask                 LoopMask = $2
   55. zero_slot_unmasked             $2 = 0
   56. copy_slot_masked               [return_loop].result = Mask($2)
   57. load_return_mask               RetMask = $1
   58. copy_slot_unmasked             $1 = [return_loop].result
   59. copy_constant                  $2 = 0x40A00000 (5.0)
   60. cmpeq_float                    $1 = equal($1, $2)
   61. zero_slot_unmasked             $15 = 0
   62. merge_condition_mask           CondMask = $0 & $1
   63. branch_if_no_active_lanes      branch_if_no_active_lanes +42 (#105)
   64. store_return_mask              $16 = RetMask
   65. copy_slot_unmasked             $17 = five
   66. copy_slot_unmasked             five = $17
   67. zero_slot_unmasked             $17 = 0
   68. copy_slot_unmasked             sum = $17
   69. zero_slot_unmasked             $17 = 0
   70. copy_slot_unmasked             i = $17
   71. store_loop_mask                $17 = LoopMask
   72. jump                           jump +19 (#91)
   73. zero_slot_unmasked             [for-loop continue mask 1] = 0
   74. store_condition_mask           $18 = CondMask
   75. copy_slot_unmasked             $19 = i
   76. copy_slot_unmasked             $20 = five
   77. cmplt_float                    $19 = lessThan($19, $20)
   78. merge_condition_mask           CondMask = $18 & $19
   79. copy_constant                  $20 = 0xFFFFFFFF
   80. copy_slot_masked               [for-loop continue mask 1] = Mask($20)
   81. mask_off_loop_mask             LoopMask &= ~(CondMask & LoopMask & RetMask)
   82. load_condition_mask            CondMask = $18
   83. copy_2_slots_unmasked          $18..19 = sum(0..1)
   84. add_float                      $18 += $19
   85. copy_slot_masked               sum = Mask($18)
   86. reenable_loop_mask             LoopMask |= [for-loop continue mask 1]
   87. copy_slot_unmasked             $18 = i
   88. copy_constant                  $19 = 0x3F800000 (1.0)
   89. add_float                      $18 += $19
   90. copy_slot_masked               i = Mask($18)
   91. copy_slot_unmasked             $18 = i
   92. copy_slot_unmasked             $19 = kTen
   93. cmplt_float                    $18 = lessThan($18, $19)
   94. merge_loop_mask                LoopMask &= $18
   95. stack_rewind
   96. branch_if_any_active_lanes     branch_if_any_active_lanes -23 (#73)
   97. load_loop_mask                 LoopMask = $17
   98. copy_slot_unmasked             $17 = sum
   99. copy_slot_masked               [continue_loop].result = Mask($17)
  100. load_return_mask               RetMask = $16
  101. copy_slot_unmasked             $16 = [continue_loop].result
  102. copy_constant                  $17 = 0x420C0000 (35.0)
  103. cmpeq_float                    $16 = equal($16, $17)
  104. copy_slot_masked               $15 = Mask($16)
  105. load_condition_mask            CondMask = $0
  106. zero_slot_unmasked             $83 = 0
  107. merge_condition_mask           CondMask = $14 & $15
  108. branch_if_no_active_lanes      branch_if_no_active_lanes +43 (#151)
  109. store_return_mask              $84 = RetMask
  110. copy_slot_unmasked             $85 = five
  111. copy_slot_unmasked             five = $85
  112. zero_slot_unmasked             $85 = 0
  113. copy_slot_unmasked             sum = $85
  114. copy_constant                  $85 = 0x3F800000 (1.0)
  115. copy_slot_unmasked             kOne = $85
  116. zero_slot_unmasked             $85 = 0
  117. copy_slot_unmasked             i = $85
  118. store_loop_mask                $85 = LoopMask
  119. jump                           jump +18 (#137)
  120. zero_slot_unmasked             [for-loop continue mask 2] = 0
  121. store_condition_mask           $86 = CondMask
  122. copy_slot_unmasked             $87 = five
  123. copy_slot_unmasked             $88 = i
  124. cmplt_float                    $87 = lessThan($87, $88)
  125. merge_condition_mask           CondMask = $86 & $87
  126. mask_off_loop_mask             LoopMask &= ~(CondMask & LoopMask & RetMask)
  127. load_condition_mask            CondMask = $86
  128. copy_slot_unmasked             $86 = sum
  129. copy_slot_unmasked             $87 = i
  130. add_float                      $86 += $87
  131. copy_slot_masked               sum = Mask($86)
  132. reenable_loop_mask             LoopMask |= [for-loop continue mask 2]
  133. copy_slot_unmasked             $86 = i
  134. copy_slot_unmasked             $87 = kOne
  135. add_float                      $86 += $87
  136. copy_slot_masked               i = Mask($86)
  137. copy_slot_unmasked             $86 = i
  138. copy_constant                  $87 = 0x41200000 (10.0)
  139. cmplt_float                    $86 = lessThan($86, $87)
  140. merge_loop_mask                LoopMask &= $86
  141. stack_rewind
  142. branch_if_any_active_lanes     branch_if_any_active_lanes -22 (#120)
  143. load_loop_mask                 LoopMask = $85
  144. copy_slot_unmasked             $85 = sum
  145. copy_slot_masked               [break_loop].result = Mask($85)
  146. load_return_mask               RetMask = $84
  147. copy_slot_unmasked             $84 = [break_loop].result
  148. copy_constant                  $85 = 0x41700000 (15.0)
  149. cmpeq_float                    $84 = equal($84, $85)
  150. copy_slot_masked               $83 = Mask($84)
  151. load_condition_mask            CondMask = $14
  152. zero_slot_unmasked             $22 = 0
  153. merge_condition_mask           CondMask = $82 & $83
  154. branch_if_no_active_lanes      branch_if_no_active_lanes +34 (#188)
  155. store_return_mask              $23 = RetMask
  156. zero_slot_unmasked             $24 = 0
  157. copy_slot_unmasked             sum = $24
  158. copy_constant                  $24 = 0x3DFBE76D (0.123)
  159. copy_slot_unmasked             i = $24
  160. store_loop_mask                $24 = LoopMask
  161. jump                           jump +10 (#171)
  162. zero_slot_unmasked             [for-loop continue mask 3] = 0
  163. copy_2_slots_unmasked          $25..26 = sum(0..1)
  164. add_float                      $25 += $26
  165. copy_slot_masked               sum = Mask($25)
  166. reenable_loop_mask             LoopMask |= [for-loop continue mask 3]
  167. copy_slot_unmasked             $25 = i
  168. copy_constant                  $26 = 0x3DE353F8 (0.111)
  169. add_float                      $25 += $26
  170. copy_slot_masked               i = Mask($25)
  171. copy_slot_unmasked             $25 = i
  172. copy_constant                  $26 = 0x3F19999A (0.6)
  173. cmplt_float                    $25 = lessThan($25, $26)
  174. merge_loop_mask                LoopMask &= $25
  175. stack_rewind
  176. branch_if_any_active_lanes     branch_if_any_active_lanes -14 (#162)
  177. load_loop_mask                 LoopMask = $24
  178. copy_slot_unmasked             $24 = sum
  179. copy_constant                  $25 = 0x3FDCCCCD (1.725)
  180. sub_float                      $24 -= $25
  181. copy_slot_masked               [float_loop].result = Mask($24)
  182. load_return_mask               RetMask = $23
  183. copy_slot_unmasked             $23 = [float_loop].result
  184. abs_float                      $23 = abs($23)
  185. copy_constant                  $24 = 0x3CCCCCCD (0.025)
  186. cmplt_float                    $23 = lessThan($23, $24)
  187. copy_slot_masked               $22 = Mask($23)
  188. load_condition_mask            CondMask = $82
  189. zero_slot_unmasked             $72 = 0
  190. merge_condition_mask           CondMask = $21 & $22
  191. branch_if_no_active_lanes      branch_if_no_active_lanes +36 (#227)
  192. store_return_mask              $73 = RetMask
  193. copy_constant                  $74 = 0x41100000 (9.0)
  194. swizzle_4                      $74..77 = ($74..77).xxxx
  195. copy_4_slots_unmasked          result = $74..77
  196. copy_constant                  $74 = 0x3F800000 (1.0)
  197. copy_slot_unmasked             i = $74
  198. store_loop_mask                $74 = LoopMask
  199. jump                           jump +9 (#208)
  200. zero_slot_unmasked             [for-loop continue mask 4] = 0
  201. copy_4_slots_unmasked          $75..78 = result
  202. copy_4_slots_masked            result = Mask($75..78)
  203. reenable_loop_mask             LoopMask |= [for-loop continue mask 4]
  204. copy_slot_unmasked             $75 = i
  205. copy_constant                  $76 = 0x3F800000 (1.0)
  206. add_float                      $75 += $76
  207. copy_slot_masked               i = Mask($75)
  208. copy_slot_unmasked             $75 = i
  209. copy_constant                  $76 = 0x40400000 (3.0)
  210. cmple_float                    $75 = lessThanEqual($75, $76)
  211. merge_loop_mask                LoopMask &= $75
  212. stack_rewind
  213. branch_if_any_active_lanes     branch_if_any_active_lanes -13 (#200)
  214. load_loop_mask                 LoopMask = $74
  215. copy_4_slots_unmasked          $74..77 = result
  216. copy_constant                  $78 = 0x41100000 (9.0)
  217. copy_constant                  $79 = 0x3F800000 (1.0)
  218. copy_constant                  $80 = 0x40000000 (2.0)
  219. copy_constant                  $81 = 0x40400000 (3.0)
  220. cmpeq_4_floats                 $74..77 = equal($74..77, $78..81)
  221. bitwise_and_2_ints             $74..75 &= $76..77
  222. bitwise_and_int                $74 &= $75
  223. copy_slot_masked               [loop_operator_le].result = Mask($74)
  224. load_return_mask               RetMask = $73
  225. copy_slot_unmasked             $73 = [loop_operator_le].result
  226. copy_slot_masked               $72 = Mask($73)
  227. load_condition_mask            CondMask = $21
  228. zero_slot_unmasked             $90 = 0
  229. merge_condition_mask           CondMask = $71 & $72
  230. branch_if_no_active_lanes      branch_if_no_active_lanes +36 (#266)
  231. store_return_mask              $91 = RetMask
  232. copy_constant                  $92 = 0x41100000 (9.0)
  233. swizzle_4                      $92..95 = ($92..95).xxxx
  234. copy_4_slots_unmasked          result = $92..95
  235. copy_constant                  $92 = 0x3F800000 (1.0)
  236. copy_slot_unmasked             i = $92
  237. store_loop_mask                $92 = LoopMask
  238. jump                           jump +9 (#247)
  239. zero_slot_unmasked             [for-loop continue mask 5] = 0
  240. copy_4_slots_unmasked          $93..96 = result
  241. copy_4_slots_masked            result = Mask($93..96)
  242. reenable_loop_mask             LoopMask |= [for-loop continue mask 5]
  243. copy_slot_unmasked             $93 = i
  244. copy_constant                  $94 = 0x3F800000 (1.0)
  245. add_float                      $93 += $94
  246. copy_slot_masked               i = Mask($93)
  247. copy_slot_unmasked             $93 = i
  248. copy_constant                  $94 = 0x40800000 (4.0)
  249. cmplt_float                    $93 = lessThan($93, $94)
  250. merge_loop_mask                LoopMask &= $93
  251. stack_rewind
  252. branch_if_any_active_lanes     branch_if_any_active_lanes -13 (#239)
  253. load_loop_mask                 LoopMask = $92
  254. copy_4_slots_unmasked          $92..95 = result
  255. copy_constant                  $96 = 0x41100000 (9.0)
  256. copy_constant                  $97 = 0x3F800000 (1.0)
  257. copy_constant                  $98 = 0x40000000 (2.0)
  258. copy_constant                  $99 = 0x40400000 (3.0)
  259. cmpeq_4_floats                 $92..95 = equal($92..95, $96..99)
  260. bitwise_and_2_ints             $92..93 &= $94..95
  261. bitwise_and_int                $92 &= $93
  262. copy_slot_masked               [loop_operator_lt].result = Mask($92)
  263. load_return_mask               RetMask = $91
  264. copy_slot_unmasked             $91 = [loop_operator_lt].result
  265. copy_slot_masked               $90 = Mask($91)
  266. load_condition_mask            CondMask = $71
  267. zero_slot_unmasked             $39 = 0
  268. merge_condition_mask           CondMask = $89 & $90
  269. branch_if_no_active_lanes      branch_if_no_active_lanes +36 (#305)
  270. store_return_mask              $40 = RetMask
  271. copy_constant                  $41 = 0x41100000 (9.0)
  272. swizzle_4                      $41..44 = ($41..44).xxxx
  273. copy_4_slots_unmasked          result = $41..44
  274. copy_constant                  $41 = 0x40400000 (3.0)
  275. copy_slot_unmasked             i = $41
  276. store_loop_mask                $41 = LoopMask
  277. jump                           jump +9 (#286)
  278. zero_slot_unmasked             [for-loop continue mask 6] = 0
  279. copy_4_slots_unmasked          $42..45 = result
  280. copy_4_slots_masked            result = Mask($42..45)
  281. reenable_loop_mask             LoopMask |= [for-loop continue mask 6]
  282. copy_slot_unmasked             $42 = i
  283. copy_constant                  $43 = 0x3F800000 (1.0)
  284. sub_float                      $42 -= $43
  285. copy_slot_masked               i = Mask($42)
  286. copy_constant                  $42 = 0x3F800000 (1.0)
  287. copy_slot_unmasked             $43 = i
  288. cmple_float                    $42 = lessThanEqual($42, $43)
  289. merge_loop_mask                LoopMask &= $42
  290. stack_rewind
  291. branch_if_any_active_lanes     branch_if_any_active_lanes -13 (#278)
  292. load_loop_mask                 LoopMask = $41
  293. copy_4_slots_unmasked          $41..44 = result
  294. copy_constant                  $45 = 0x41100000 (9.0)
  295. copy_constant                  $46 = 0x40400000 (3.0)
  296. copy_constant                  $47 = 0x40000000 (2.0)
  297. copy_constant                  $48 = 0x3F800000 (1.0)
  298. cmpeq_4_floats                 $41..44 = equal($41..44, $45..48)
  299. bitwise_and_2_ints             $41..42 &= $43..44
  300. bitwise_and_int                $41 &= $42
  301. copy_slot_masked               [loop_operator_ge].result = Mask($41)
  302. load_return_mask               RetMask = $40
  303. copy_slot_unmasked             $40 = [loop_operator_ge].result
  304. copy_slot_masked               $39 = Mask($40)
  305. load_condition_mask            CondMask = $89
  306. zero_slot_unmasked             $61 = 0
  307. merge_condition_mask           CondMask = $38 & $39
  308. branch_if_no_active_lanes      branch_if_no_active_lanes +36 (#344)
  309. store_return_mask              $62 = RetMask
  310. copy_constant                  $63 = 0x41100000 (9.0)
  311. swizzle_4                      $63..66 = ($63..66).xxxx
  312. copy_4_slots_unmasked          result = $63..66
  313. copy_constant                  $63 = 0x40400000 (3.0)
  314. copy_slot_unmasked             i = $63
  315. store_loop_mask                $63 = LoopMask
  316. jump                           jump +9 (#325)
  317. zero_slot_unmasked             [for-loop continue mask 7] = 0
  318. copy_4_slots_unmasked          $64..67 = result
  319. copy_4_slots_masked            result = Mask($64..67)
  320. reenable_loop_mask             LoopMask |= [for-loop continue mask 7]
  321. copy_slot_unmasked             $64 = i
  322. copy_constant                  $65 = 0x3F800000 (1.0)
  323. sub_float                      $64 -= $65
  324. copy_slot_masked               i = Mask($64)
  325. zero_slot_unmasked             $64 = 0
  326. copy_slot_unmasked             $65 = i
  327. cmplt_float                    $64 = lessThan($64, $65)
  328. merge_loop_mask                LoopMask &= $64
  329. stack_rewind
  330. branch_if_any_active_lanes     branch_if_any_active_lanes -13 (#317)
  331. load_loop_mask                 LoopMask = $63
  332. copy_4_slots_unmasked          $63..66 = result
  333. copy_constant                  $67 = 0x41100000 (9.0)
  334. copy_constant                  $68 = 0x40400000 (3.0)
  335. copy_constant                  $69 = 0x40000000 (2.0)
  336. copy_constant                  $70 = 0x3F800000 (1.0)
  337. cmpeq_4_floats                 $63..66 = equal($63..66, $67..70)
  338. bitwise_and_2_ints             $63..64 &= $65..66
  339. bitwise_and_int                $63 &= $64
  340. copy_slot_masked               [loop_operator_gt].result = Mask($63)
  341. load_return_mask               RetMask = $62
  342. copy_slot_unmasked             $62 = [loop_operator_gt].result
  343. copy_slot_masked               $61 = Mask($62)
  344. load_condition_mask            CondMask = $38
  345. zero_slot_unmasked             $50 = 0
  346. merge_condition_mask           CondMask = $60 & $61
  347. branch_if_no_active_lanes      branch_if_no_active_lanes +36 (#383)
  348. store_return_mask              $51 = RetMask
  349. copy_constant                  $52 = 0x41100000 (9.0)
  350. swizzle_4                      $52..55 = ($52..55).xxxx
  351. copy_4_slots_unmasked          result = $52..55
  352. copy_constant                  $52 = 0x3F800000 (1.0)
  353. copy_slot_unmasked             i = $52
  354. store_loop_mask                $52 = LoopMask
  355. jump                           jump +9 (#364)
  356. zero_slot_unmasked             [for-loop continue mask 8] = 0
  357. copy_4_slots_unmasked          $53..56 = result
  358. copy_4_slots_masked            result = Mask($53..56)
  359. reenable_loop_mask             LoopMask |= [for-loop continue mask 8]
  360. copy_slot_unmasked             $53 = i
  361. copy_constant                  $54 = 0x3F800000 (1.0)
  362. add_float                      $53 += $54
  363. copy_slot_masked               i = Mask($53)
  364. copy_slot_unmasked             $53 = i
  365. copy_constant                  $54 = 0x3F800000 (1.0)
  366. cmpeq_float                    $53 = equal($53, $54)
  367. merge_loop_mask                LoopMask &= $53
  368. stack_rewind
  369. branch_if_any_active_lanes     branch_if_any_active_lanes -13 (#356)
  370. load_loop_mask                 LoopMask = $52
  371. copy_4_slots_unmasked          $52..55 = result
  372. copy_constant                  $56 = 0x41100000 (9.0)
  373. copy_constant                  $57 = 0x41100000 (9.0)
  374. copy_constant                  $58 = 0x41100000 (9.0)
  375. copy_constant                  $59 = 0x3F800000 (1.0)
  376. cmpeq_4_floats                 $52..55 = equal($52..55, $56..59)
  377. bitwise_and_2_ints             $52..53 &= $54..55
  378. bitwise_and_int                $52 &= $53
  379. copy_slot_masked               [loop_operator_eq].result = Mask($52)
  380. load_return_mask               RetMask = $51
  381. copy_slot_unmasked             $51 = [loop_operator_eq].result
  382. copy_slot_masked               $50 = Mask($51)
  383. load_condition_mask            CondMask = $60
  384. zero_slot_unmasked             $28 = 0
  385. merge_condition_mask           CondMask = $49 & $50
  386. branch_if_no_active_lanes      branch_if_no_active_lanes +36 (#422)
  387. store_return_mask              $29 = RetMask
  388. copy_constant                  $30 = 0x41100000 (9.0)
  389. swizzle_4                      $30..33 = ($30..33).xxxx
  390. copy_4_slots_unmasked          result = $30..33
  391. copy_constant                  $30 = 0x3F800000 (1.0)
  392. copy_slot_unmasked             i = $30
  393. store_loop_mask                $30 = LoopMask
  394. jump                           jump +9 (#403)
  395. zero_slot_unmasked             [for-loop continue mask 9] = 0
  396. copy_4_slots_unmasked          $31..34 = result
  397. copy_4_slots_masked            result = Mask($31..34)
  398. reenable_loop_mask             LoopMask |= [for-loop continue mask 9]
  399. copy_slot_unmasked             $31 = i
  400. copy_constant                  $32 = 0x3F800000 (1.0)
  401. add_float                      $31 += $32
  402. copy_slot_masked               i = Mask($31)
  403. copy_slot_unmasked             $31 = i
  404. copy_constant                  $32 = 0x40800000 (4.0)
  405. cmpne_float                    $31 = notEqual($31, $32)
  406. merge_loop_mask                LoopMask &= $31
  407. stack_rewind
  408. branch_if_any_active_lanes     branch_if_any_active_lanes -13 (#395)
  409. load_loop_mask                 LoopMask = $30
  410. copy_4_slots_unmasked          $30..33 = result
  411. copy_constant                  $34 = 0x41100000 (9.0)
  412. copy_constant                  $35 = 0x3F800000 (1.0)
  413. copy_constant                  $36 = 0x40000000 (2.0)
  414. copy_constant                  $37 = 0x40400000 (3.0)
  415. cmpeq_4_floats                 $30..33 = equal($30..33, $34..37)
  416. bitwise_and_2_ints             $30..31 &= $32..33
  417. bitwise_and_int                $30 &= $31
  418. copy_slot_masked               [loop_operator_ne].result = Mask($30)
  419. load_return_mask               RetMask = $29
  420. copy_slot_unmasked             $29 = [loop_operator_ne].result
  421. copy_slot_masked               $28 = Mask($29)
  422. load_condition_mask            CondMask = $49
  423. copy_4_constants               $6..9 = colorRed
  424. merge_condition_mask           CondMask = $27 & $28
  425. copy_4_constants               $10..13 = colorGreen
  426. copy_4_slots_masked            $6..9 = Mask($10..13)
  427. load_condition_mask            CondMask = $27
  428. copy_4_slots_masked            [main].result = Mask($6..9)
  429. mask_off_return_mask           RetMask &= ~(CondMask & LoopMask & RetMask)
  430. load_src                       src.rgba = [main].result
