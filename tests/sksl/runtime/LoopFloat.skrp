    1. store_src_rg                   pos = src.rg
    2. init_lane_masks                CondMask = LoopMask = RetMask = true
    3. zero_slot_unmasked             $6 = 0
    4. copy_slot_unmasked             kZero = $6
    5. copy_constant                  $6 = 0x41200000 (10.0)
    6. copy_slot_unmasked             kTen = $6
    7. copy_slot_unmasked             $6 = pos(0)
    8. copy_constant                  $7 = colorGreen(1)
    9. max_float                      $6 = max($6, $7)
   10. copy_constant                  $7 = colorGreen(3)
   11. min_float                      $6 = min($6, $7)
   12. copy_constant                  $7 = 0x40A00000 (5.0)
   13. mul_float                      $6 *= $7
   14. copy_slot_unmasked             five = $6
   15. store_condition_mask           $27 = CondMask
   16. store_condition_mask           $49 = CondMask
   17. store_condition_mask           $60 = CondMask
   18. store_condition_mask           $38 = CondMask
   19. store_condition_mask           $89 = CondMask
   20. store_condition_mask           $71 = CondMask
   21. store_condition_mask           $21 = CondMask
   22. store_condition_mask           $82 = CondMask
   23. store_condition_mask           $14 = CondMask
   24. store_condition_mask           $0 = CondMask
   25. branch_if_no_active_lanes      branch_if_no_active_lanes +35 (#60)
   26. store_return_mask              $1 = RetMask
   27. copy_slot_unmasked             $2 = five
   28. copy_slot_unmasked             five = $2
   29. copy_slot_unmasked             $2 = kZero
   30. copy_slot_unmasked             i = $2
   31. store_loop_mask                $2 = LoopMask
   32. jump                           jump +16 (#48)
   33. zero_slot_unmasked             [for-loop continue mask 0] = 0
   34. store_condition_mask           $3 = CondMask
   35. copy_slot_unmasked             $4 = i
   36. copy_slot_unmasked             $5 = five
   37. cmpeq_float                    $4 = equal($4, $5)
   38. merge_condition_mask           CondMask = $3 & $4
   39. copy_slot_unmasked             $5 = i
   40. copy_slot_masked               [return_loop].result = Mask($5)
   41. mask_off_return_mask           RetMask &= ~(CondMask & LoopMask & RetMask)
   42. load_condition_mask            CondMask = $3
   43. reenable_loop_mask             LoopMask |= [for-loop continue mask 0]
   44. copy_slot_unmasked             $3 = i
   45. copy_constant                  $4 = 0x3F800000 (1.0)
   46. add_float                      $3 += $4
   47. copy_slot_masked               i = Mask($3)
   48. copy_slot_unmasked             $3 = i
   49. copy_constant                  $4 = 0x41200000 (10.0)
   50. cmplt_float                    $3 = lessThan($3, $4)
   51. merge_loop_mask                LoopMask &= $3
   52. stack_rewind
   53. branch_if_any_active_lanes     branch_if_any_active_lanes -20 (#33)
   54. load_loop_mask                 LoopMask = $2
   55. zero_slot_unmasked             $2 = 0
   56. copy_slot_masked               [return_loop].result = Mask($2)
   57. mask_off_return_mask           RetMask &= ~(CondMask & LoopMask & RetMask)
   58. load_return_mask               RetMask = $1
   59. copy_slot_unmasked             $1 = [return_loop].result
   60. copy_constant                  $2 = 0x40A00000 (5.0)
   61. cmpeq_float                    $1 = equal($1, $2)
   62. zero_slot_unmasked             $15 = 0
   63. merge_condition_mask           CondMask = $0 & $1
   64. branch_if_no_active_lanes      branch_if_no_active_lanes +44 (#108)
   65. store_return_mask              $16 = RetMask
   66. copy_slot_unmasked             $17 = five
   67. copy_slot_unmasked             five = $17
   68. zero_slot_unmasked             $17 = 0
   69. copy_slot_unmasked             sum = $17
   70. zero_slot_unmasked             $17 = 0
   71. copy_slot_unmasked             i = $17
   72. store_loop_mask                $17 = LoopMask
   73. jump                           jump +20 (#93)
   74. zero_slot_unmasked             [for-loop continue mask 1] = 0
   75. store_condition_mask           $18 = CondMask
   76. copy_slot_unmasked             $19 = i
   77. copy_slot_unmasked             $20 = five
   78. cmplt_float                    $19 = lessThan($19, $20)
   79. merge_condition_mask           CondMask = $18 & $19
   80. copy_constant                  $20 = 0xFFFFFFFF
   81. copy_slot_masked               [for-loop continue mask 1] = Mask($20)
   82. mask_off_loop_mask             LoopMask &= ~(CondMask & LoopMask & RetMask)
   83. load_condition_mask            CondMask = $18
   84. copy_slot_unmasked             $18 = sum
   85. copy_slot_unmasked             $19 = i
   86. add_float                      $18 += $19
   87. copy_slot_masked               sum = Mask($18)
   88. reenable_loop_mask             LoopMask |= [for-loop continue mask 1]
   89. copy_slot_unmasked             $18 = i
   90. copy_constant                  $19 = 0x3F800000 (1.0)
   91. add_float                      $18 += $19
   92. copy_slot_masked               i = Mask($18)
   93. copy_slot_unmasked             $18 = i
   94. copy_slot_unmasked             $19 = kTen
   95. cmplt_float                    $18 = lessThan($18, $19)
   96. merge_loop_mask                LoopMask &= $18
   97. stack_rewind
   98. branch_if_any_active_lanes     branch_if_any_active_lanes -24 (#74)
   99. load_loop_mask                 LoopMask = $17
  100. copy_slot_unmasked             $17 = sum
  101. copy_slot_masked               [continue_loop].result = Mask($17)
  102. mask_off_return_mask           RetMask &= ~(CondMask & LoopMask & RetMask)
  103. load_return_mask               RetMask = $16
  104. copy_slot_unmasked             $16 = [continue_loop].result
  105. copy_constant                  $17 = 0x420C0000 (35.0)
  106. cmpeq_float                    $16 = equal($16, $17)
  107. copy_slot_masked               $15 = Mask($16)
  108. load_condition_mask            CondMask = $0
  109. zero_slot_unmasked             $83 = 0
  110. merge_condition_mask           CondMask = $14 & $15
  111. branch_if_no_active_lanes      branch_if_no_active_lanes +44 (#155)
  112. store_return_mask              $84 = RetMask
  113. copy_slot_unmasked             $85 = five
  114. copy_slot_unmasked             five = $85
  115. zero_slot_unmasked             $85 = 0
  116. copy_slot_unmasked             sum = $85
  117. copy_constant                  $85 = 0x3F800000 (1.0)
  118. copy_slot_unmasked             kOne = $85
  119. zero_slot_unmasked             $85 = 0
  120. copy_slot_unmasked             i = $85
  121. store_loop_mask                $85 = LoopMask
  122. jump                           jump +18 (#140)
  123. zero_slot_unmasked             [for-loop continue mask 2] = 0
  124. store_condition_mask           $86 = CondMask
  125. copy_slot_unmasked             $87 = five
  126. copy_slot_unmasked             $88 = i
  127. cmplt_float                    $87 = lessThan($87, $88)
  128. merge_condition_mask           CondMask = $86 & $87
  129. mask_off_loop_mask             LoopMask &= ~(CondMask & LoopMask & RetMask)
  130. load_condition_mask            CondMask = $86
  131. copy_slot_unmasked             $86 = sum
  132. copy_slot_unmasked             $87 = i
  133. add_float                      $86 += $87
  134. copy_slot_masked               sum = Mask($86)
  135. reenable_loop_mask             LoopMask |= [for-loop continue mask 2]
  136. copy_slot_unmasked             $86 = i
  137. copy_slot_unmasked             $87 = kOne
  138. add_float                      $86 += $87
  139. copy_slot_masked               i = Mask($86)
  140. copy_slot_unmasked             $86 = i
  141. copy_constant                  $87 = 0x41200000 (10.0)
  142. cmplt_float                    $86 = lessThan($86, $87)
  143. merge_loop_mask                LoopMask &= $86
  144. stack_rewind
  145. branch_if_any_active_lanes     branch_if_any_active_lanes -22 (#123)
  146. load_loop_mask                 LoopMask = $85
  147. copy_slot_unmasked             $85 = sum
  148. copy_slot_masked               [break_loop].result = Mask($85)
  149. mask_off_return_mask           RetMask &= ~(CondMask & LoopMask & RetMask)
  150. load_return_mask               RetMask = $84
  151. copy_slot_unmasked             $84 = [break_loop].result
  152. copy_constant                  $85 = 0x41700000 (15.0)
  153. cmpeq_float                    $84 = equal($84, $85)
  154. copy_slot_masked               $83 = Mask($84)
  155. load_condition_mask            CondMask = $14
  156. zero_slot_unmasked             $22 = 0
  157. merge_condition_mask           CondMask = $82 & $83
  158. branch_if_no_active_lanes      branch_if_no_active_lanes +36 (#194)
  159. store_return_mask              $23 = RetMask
  160. zero_slot_unmasked             $24 = 0
  161. copy_slot_unmasked             sum = $24
  162. copy_constant                  $24 = 0x3DFBE76D (0.123)
  163. copy_slot_unmasked             i = $24
  164. store_loop_mask                $24 = LoopMask
  165. jump                           jump +11 (#176)
  166. zero_slot_unmasked             [for-loop continue mask 3] = 0
  167. copy_slot_unmasked             $25 = sum
  168. copy_slot_unmasked             $26 = i
  169. add_float                      $25 += $26
  170. copy_slot_masked               sum = Mask($25)
  171. reenable_loop_mask             LoopMask |= [for-loop continue mask 3]
  172. copy_slot_unmasked             $25 = i
  173. copy_constant                  $26 = 0x3DE353F8 (0.111)
  174. add_float                      $25 += $26
  175. copy_slot_masked               i = Mask($25)
  176. copy_slot_unmasked             $25 = i
  177. copy_constant                  $26 = 0x3F19999A (0.6)
  178. cmplt_float                    $25 = lessThan($25, $26)
  179. merge_loop_mask                LoopMask &= $25
  180. stack_rewind
  181. branch_if_any_active_lanes     branch_if_any_active_lanes -15 (#166)
  182. load_loop_mask                 LoopMask = $24
  183. copy_slot_unmasked             $24 = sum
  184. copy_constant                  $25 = 0x3FDCCCCD (1.725)
  185. sub_float                      $24 -= $25
  186. copy_slot_masked               [float_loop].result = Mask($24)
  187. mask_off_return_mask           RetMask &= ~(CondMask & LoopMask & RetMask)
  188. load_return_mask               RetMask = $23
  189. copy_slot_unmasked             $23 = [float_loop].result
  190. abs_float                      $23 = abs($23)
  191. copy_constant                  $24 = 0x3CCCCCCD (0.025)
  192. cmplt_float                    $23 = lessThan($23, $24)
  193. copy_slot_masked               $22 = Mask($23)
  194. load_condition_mask            CondMask = $82
  195. zero_slot_unmasked             $72 = 0
  196. merge_condition_mask           CondMask = $21 & $22
  197. branch_if_no_active_lanes      branch_if_no_active_lanes +38 (#235)
  198. store_return_mask              $73 = RetMask
  199. copy_constant                  $74 = 0x41100000 (9.0)
  200. swizzle_4                      $74..77 = ($74..77).xxxx
  201. copy_4_slots_unmasked          result = $74..77
  202. copy_constant                  $74 = 0x3F800000 (1.0)
  203. copy_slot_unmasked             i = $74
  204. store_loop_mask                $74 = LoopMask
  205. jump                           jump +10 (#215)
  206. zero_slot_unmasked             [for-loop continue mask 4] = 0
  207. copy_3_slots_unmasked          $75..77 = result(1..3)
  208. copy_slot_unmasked             $78 = i
  209. copy_4_slots_masked            result = Mask($75..78)
  210. reenable_loop_mask             LoopMask |= [for-loop continue mask 4]
  211. copy_slot_unmasked             $75 = i
  212. copy_constant                  $76 = 0x3F800000 (1.0)
  213. add_float                      $75 += $76
  214. copy_slot_masked               i = Mask($75)
  215. copy_slot_unmasked             $75 = i
  216. copy_constant                  $76 = 0x40400000 (3.0)
  217. cmple_float                    $75 = lessThanEqual($75, $76)
  218. merge_loop_mask                LoopMask &= $75
  219. stack_rewind
  220. branch_if_any_active_lanes     branch_if_any_active_lanes -14 (#206)
  221. load_loop_mask                 LoopMask = $74
  222. copy_4_slots_unmasked          $74..77 = result
  223. copy_constant                  $78 = 0x41100000 (9.0)
  224. copy_constant                  $79 = 0x3F800000 (1.0)
  225. copy_constant                  $80 = 0x40000000 (2.0)
  226. copy_constant                  $81 = 0x40400000 (3.0)
  227. cmpeq_4_floats                 $74..77 = equal($74..77, $78..81)
  228. bitwise_and_2_ints             $74..75 &= $76..77
  229. bitwise_and_int                $74 &= $75
  230. copy_slot_masked               [loop_operator_le].result = Mask($74)
  231. mask_off_return_mask           RetMask &= ~(CondMask & LoopMask & RetMask)
  232. load_return_mask               RetMask = $73
  233. copy_slot_unmasked             $73 = [loop_operator_le].result
  234. copy_slot_masked               $72 = Mask($73)
  235. load_condition_mask            CondMask = $21
  236. zero_slot_unmasked             $90 = 0
  237. merge_condition_mask           CondMask = $71 & $72
  238. branch_if_no_active_lanes      branch_if_no_active_lanes +38 (#276)
  239. store_return_mask              $91 = RetMask
  240. copy_constant                  $92 = 0x41100000 (9.0)
  241. swizzle_4                      $92..95 = ($92..95).xxxx
  242. copy_4_slots_unmasked          result = $92..95
  243. copy_constant                  $92 = 0x3F800000 (1.0)
  244. copy_slot_unmasked             i = $92
  245. store_loop_mask                $92 = LoopMask
  246. jump                           jump +10 (#256)
  247. zero_slot_unmasked             [for-loop continue mask 5] = 0
  248. copy_3_slots_unmasked          $93..95 = result(1..3)
  249. copy_slot_unmasked             $96 = i
  250. copy_4_slots_masked            result = Mask($93..96)
  251. reenable_loop_mask             LoopMask |= [for-loop continue mask 5]
  252. copy_slot_unmasked             $93 = i
  253. copy_constant                  $94 = 0x3F800000 (1.0)
  254. add_float                      $93 += $94
  255. copy_slot_masked               i = Mask($93)
  256. copy_slot_unmasked             $93 = i
  257. copy_constant                  $94 = 0x40800000 (4.0)
  258. cmplt_float                    $93 = lessThan($93, $94)
  259. merge_loop_mask                LoopMask &= $93
  260. stack_rewind
  261. branch_if_any_active_lanes     branch_if_any_active_lanes -14 (#247)
  262. load_loop_mask                 LoopMask = $92
  263. copy_4_slots_unmasked          $92..95 = result
  264. copy_constant                  $96 = 0x41100000 (9.0)
  265. copy_constant                  $97 = 0x3F800000 (1.0)
  266. copy_constant                  $98 = 0x40000000 (2.0)
  267. copy_constant                  $99 = 0x40400000 (3.0)
  268. cmpeq_4_floats                 $92..95 = equal($92..95, $96..99)
  269. bitwise_and_2_ints             $92..93 &= $94..95
  270. bitwise_and_int                $92 &= $93
  271. copy_slot_masked               [loop_operator_lt].result = Mask($92)
  272. mask_off_return_mask           RetMask &= ~(CondMask & LoopMask & RetMask)
  273. load_return_mask               RetMask = $91
  274. copy_slot_unmasked             $91 = [loop_operator_lt].result
  275. copy_slot_masked               $90 = Mask($91)
  276. load_condition_mask            CondMask = $71
  277. zero_slot_unmasked             $39 = 0
  278. merge_condition_mask           CondMask = $89 & $90
  279. branch_if_no_active_lanes      branch_if_no_active_lanes +38 (#317)
  280. store_return_mask              $40 = RetMask
  281. copy_constant                  $41 = 0x41100000 (9.0)
  282. swizzle_4                      $41..44 = ($41..44).xxxx
  283. copy_4_slots_unmasked          result = $41..44
  284. copy_constant                  $41 = 0x40400000 (3.0)
  285. copy_slot_unmasked             i = $41
  286. store_loop_mask                $41 = LoopMask
  287. jump                           jump +10 (#297)
  288. zero_slot_unmasked             [for-loop continue mask 6] = 0
  289. copy_3_slots_unmasked          $42..44 = result(1..3)
  290. copy_slot_unmasked             $45 = i
  291. copy_4_slots_masked            result = Mask($42..45)
  292. reenable_loop_mask             LoopMask |= [for-loop continue mask 6]
  293. copy_slot_unmasked             $42 = i
  294. copy_constant                  $43 = 0x3F800000 (1.0)
  295. sub_float                      $42 -= $43
  296. copy_slot_masked               i = Mask($42)
  297. copy_constant                  $42 = 0x3F800000 (1.0)
  298. copy_slot_unmasked             $43 = i
  299. cmple_float                    $42 = lessThanEqual($42, $43)
  300. merge_loop_mask                LoopMask &= $42
  301. stack_rewind
  302. branch_if_any_active_lanes     branch_if_any_active_lanes -14 (#288)
  303. load_loop_mask                 LoopMask = $41
  304. copy_4_slots_unmasked          $41..44 = result
  305. copy_constant                  $45 = 0x41100000 (9.0)
  306. copy_constant                  $46 = 0x40400000 (3.0)
  307. copy_constant                  $47 = 0x40000000 (2.0)
  308. copy_constant                  $48 = 0x3F800000 (1.0)
  309. cmpeq_4_floats                 $41..44 = equal($41..44, $45..48)
  310. bitwise_and_2_ints             $41..42 &= $43..44
  311. bitwise_and_int                $41 &= $42
  312. copy_slot_masked               [loop_operator_ge].result = Mask($41)
  313. mask_off_return_mask           RetMask &= ~(CondMask & LoopMask & RetMask)
  314. load_return_mask               RetMask = $40
  315. copy_slot_unmasked             $40 = [loop_operator_ge].result
  316. copy_slot_masked               $39 = Mask($40)
  317. load_condition_mask            CondMask = $89
  318. zero_slot_unmasked             $61 = 0
  319. merge_condition_mask           CondMask = $38 & $39
  320. branch_if_no_active_lanes      branch_if_no_active_lanes +38 (#358)
  321. store_return_mask              $62 = RetMask
  322. copy_constant                  $63 = 0x41100000 (9.0)
  323. swizzle_4                      $63..66 = ($63..66).xxxx
  324. copy_4_slots_unmasked          result = $63..66
  325. copy_constant                  $63 = 0x40400000 (3.0)
  326. copy_slot_unmasked             i = $63
  327. store_loop_mask                $63 = LoopMask
  328. jump                           jump +10 (#338)
  329. zero_slot_unmasked             [for-loop continue mask 7] = 0
  330. copy_3_slots_unmasked          $64..66 = result(1..3)
  331. copy_slot_unmasked             $67 = i
  332. copy_4_slots_masked            result = Mask($64..67)
  333. reenable_loop_mask             LoopMask |= [for-loop continue mask 7]
  334. copy_slot_unmasked             $64 = i
  335. copy_constant                  $65 = 0x3F800000 (1.0)
  336. sub_float                      $64 -= $65
  337. copy_slot_masked               i = Mask($64)
  338. zero_slot_unmasked             $64 = 0
  339. copy_slot_unmasked             $65 = i
  340. cmplt_float                    $64 = lessThan($64, $65)
  341. merge_loop_mask                LoopMask &= $64
  342. stack_rewind
  343. branch_if_any_active_lanes     branch_if_any_active_lanes -14 (#329)
  344. load_loop_mask                 LoopMask = $63
  345. copy_4_slots_unmasked          $63..66 = result
  346. copy_constant                  $67 = 0x41100000 (9.0)
  347. copy_constant                  $68 = 0x40400000 (3.0)
  348. copy_constant                  $69 = 0x40000000 (2.0)
  349. copy_constant                  $70 = 0x3F800000 (1.0)
  350. cmpeq_4_floats                 $63..66 = equal($63..66, $67..70)
  351. bitwise_and_2_ints             $63..64 &= $65..66
  352. bitwise_and_int                $63 &= $64
  353. copy_slot_masked               [loop_operator_gt].result = Mask($63)
  354. mask_off_return_mask           RetMask &= ~(CondMask & LoopMask & RetMask)
  355. load_return_mask               RetMask = $62
  356. copy_slot_unmasked             $62 = [loop_operator_gt].result
  357. copy_slot_masked               $61 = Mask($62)
  358. load_condition_mask            CondMask = $38
  359. zero_slot_unmasked             $50 = 0
  360. merge_condition_mask           CondMask = $60 & $61
  361. branch_if_no_active_lanes      branch_if_no_active_lanes +38 (#399)
  362. store_return_mask              $51 = RetMask
  363. copy_constant                  $52 = 0x41100000 (9.0)
  364. swizzle_4                      $52..55 = ($52..55).xxxx
  365. copy_4_slots_unmasked          result = $52..55
  366. copy_constant                  $52 = 0x3F800000 (1.0)
  367. copy_slot_unmasked             i = $52
  368. store_loop_mask                $52 = LoopMask
  369. jump                           jump +10 (#379)
  370. zero_slot_unmasked             [for-loop continue mask 8] = 0
  371. copy_3_slots_unmasked          $53..55 = result(1..3)
  372. copy_slot_unmasked             $56 = i
  373. copy_4_slots_masked            result = Mask($53..56)
  374. reenable_loop_mask             LoopMask |= [for-loop continue mask 8]
  375. copy_slot_unmasked             $53 = i
  376. copy_constant                  $54 = 0x3F800000 (1.0)
  377. add_float                      $53 += $54
  378. copy_slot_masked               i = Mask($53)
  379. copy_slot_unmasked             $53 = i
  380. copy_constant                  $54 = 0x3F800000 (1.0)
  381. cmpeq_float                    $53 = equal($53, $54)
  382. merge_loop_mask                LoopMask &= $53
  383. stack_rewind
  384. branch_if_any_active_lanes     branch_if_any_active_lanes -14 (#370)
  385. load_loop_mask                 LoopMask = $52
  386. copy_4_slots_unmasked          $52..55 = result
  387. copy_constant                  $56 = 0x41100000 (9.0)
  388. copy_constant                  $57 = 0x41100000 (9.0)
  389. copy_constant                  $58 = 0x41100000 (9.0)
  390. copy_constant                  $59 = 0x3F800000 (1.0)
  391. cmpeq_4_floats                 $52..55 = equal($52..55, $56..59)
  392. bitwise_and_2_ints             $52..53 &= $54..55
  393. bitwise_and_int                $52 &= $53
  394. copy_slot_masked               [loop_operator_eq].result = Mask($52)
  395. mask_off_return_mask           RetMask &= ~(CondMask & LoopMask & RetMask)
  396. load_return_mask               RetMask = $51
  397. copy_slot_unmasked             $51 = [loop_operator_eq].result
  398. copy_slot_masked               $50 = Mask($51)
  399. load_condition_mask            CondMask = $60
  400. zero_slot_unmasked             $28 = 0
  401. merge_condition_mask           CondMask = $49 & $50
  402. branch_if_no_active_lanes      branch_if_no_active_lanes +38 (#440)
  403. store_return_mask              $29 = RetMask
  404. copy_constant                  $30 = 0x41100000 (9.0)
  405. swizzle_4                      $30..33 = ($30..33).xxxx
  406. copy_4_slots_unmasked          result = $30..33
  407. copy_constant                  $30 = 0x3F800000 (1.0)
  408. copy_slot_unmasked             i = $30
  409. store_loop_mask                $30 = LoopMask
  410. jump                           jump +10 (#420)
  411. zero_slot_unmasked             [for-loop continue mask 9] = 0
  412. copy_3_slots_unmasked          $31..33 = result(1..3)
  413. copy_slot_unmasked             $34 = i
  414. copy_4_slots_masked            result = Mask($31..34)
  415. reenable_loop_mask             LoopMask |= [for-loop continue mask 9]
  416. copy_slot_unmasked             $31 = i
  417. copy_constant                  $32 = 0x3F800000 (1.0)
  418. add_float                      $31 += $32
  419. copy_slot_masked               i = Mask($31)
  420. copy_slot_unmasked             $31 = i
  421. copy_constant                  $32 = 0x40800000 (4.0)
  422. cmpne_float                    $31 = notEqual($31, $32)
  423. merge_loop_mask                LoopMask &= $31
  424. stack_rewind
  425. branch_if_any_active_lanes     branch_if_any_active_lanes -14 (#411)
  426. load_loop_mask                 LoopMask = $30
  427. copy_4_slots_unmasked          $30..33 = result
  428. copy_constant                  $34 = 0x41100000 (9.0)
  429. copy_constant                  $35 = 0x3F800000 (1.0)
  430. copy_constant                  $36 = 0x40000000 (2.0)
  431. copy_constant                  $37 = 0x40400000 (3.0)
  432. cmpeq_4_floats                 $30..33 = equal($30..33, $34..37)
  433. bitwise_and_2_ints             $30..31 &= $32..33
  434. bitwise_and_int                $30 &= $31
  435. copy_slot_masked               [loop_operator_ne].result = Mask($30)
  436. mask_off_return_mask           RetMask &= ~(CondMask & LoopMask & RetMask)
  437. load_return_mask               RetMask = $29
  438. copy_slot_unmasked             $29 = [loop_operator_ne].result
  439. copy_slot_masked               $28 = Mask($29)
  440. load_condition_mask            CondMask = $49
  441. copy_4_constants               $6..9 = colorRed
  442. merge_condition_mask           CondMask = $27 & $28
  443. copy_4_constants               $10..13 = colorGreen
  444. copy_4_slots_masked            $6..9 = Mask($10..13)
  445. load_condition_mask            CondMask = $27
  446. copy_4_slots_masked            [main].result = Mask($6..9)
  447. mask_off_return_mask           RetMask &= ~(CondMask & LoopMask & RetMask)
  448. load_src                       src.rgba = [main].result
