    1. store_src_rg                   pos = src.rg
    2. init_lane_masks                CondMask = LoopMask = RetMask = true
    3. zero_slot_unmasked             $0 = 0
    4. copy_slot_unmasked             kZero = $0
    5. copy_constant                  $0 = 0x0000000A (1.401298e-44)
    6. copy_slot_unmasked             kTen = $0
    7. copy_slot_unmasked             $0 = pos(0)
    8. copy_constant                  $1 = colorGreen(1)
    9. max_float                      $0 = max($0, $1)
   10. copy_constant                  $1 = colorGreen(3)
   11. min_float                      $0 = min($0, $1)
   12. cast_to_int_from_float         $0 = FloatToInt($0)
   13. copy_constant                  $1 = 0x00000005 (7.006492e-45)
   14. mul_int                        $0 *= $1
   15. copy_slot_unmasked             five = $0
   16. store_condition_mask           $21 = CondMask
   17. store_condition_mask           $43 = CondMask
   18. store_condition_mask           $54 = CondMask
   19. store_condition_mask           $32 = CondMask
   20. store_condition_mask           $83 = CondMask
   21. store_condition_mask           $65 = CondMask
   22. store_condition_mask           $14 = CondMask
   23. store_condition_mask           $76 = CondMask
   24. store_condition_mask           $8 = CondMask
   25. branch_if_no_active_lanes      branch_if_no_active_lanes +34 (#59)
   26. store_return_mask              $9 = RetMask
   27. copy_slot_unmasked             $10 = five
   28. copy_slot_unmasked             five = $10
   29. copy_slot_unmasked             $10 = kZero
   30. copy_slot_unmasked             i = $10
   31. store_loop_mask                $10 = LoopMask
   32. jump                           jump +16 (#48)
   33. zero_slot_unmasked             [for-loop continue mask 0] = 0
   34. store_condition_mask           $11 = CondMask
   35. copy_slot_unmasked             $12 = i
   36. copy_slot_unmasked             $13 = five
   37. cmpeq_int                      $12 = equal($12, $13)
   38. merge_condition_mask           CondMask = $11 & $12
   39. copy_slot_unmasked             $13 = i
   40. copy_slot_masked               [return_loop].result = Mask($13)
   41. mask_off_return_mask           RetMask &= ~(CondMask & LoopMask & RetMask)
   42. load_condition_mask            CondMask = $11
   43. reenable_loop_mask             LoopMask |= [for-loop continue mask 0]
   44. copy_slot_unmasked             $11 = i
   45. copy_constant                  $12 = 0x00000001 (1.401298e-45)
   46. add_int                        $11 += $12
   47. copy_slot_masked               i = Mask($11)
   48. copy_slot_unmasked             $11 = i
   49. copy_constant                  $12 = 0x0000000A (1.401298e-44)
   50. cmplt_int                      $11 = lessThan($11, $12)
   51. merge_loop_mask                LoopMask &= $11
   52. stack_rewind
   53. branch_if_any_active_lanes     branch_if_any_active_lanes -20 (#33)
   54. load_loop_mask                 LoopMask = $10
   55. zero_slot_unmasked             $10 = 0
   56. copy_slot_masked               [return_loop].result = Mask($10)
   57. load_return_mask               RetMask = $9
   58. copy_slot_unmasked             $9 = [return_loop].result
   59. copy_constant                  $10 = 0x00000005 (7.006492e-45)
   60. cmpeq_int                      $9 = equal($9, $10)
   61. zero_slot_unmasked             $77 = 0
   62. merge_condition_mask           CondMask = $8 & $9
   63. branch_if_no_active_lanes      branch_if_no_active_lanes +42 (#105)
   64. store_return_mask              $78 = RetMask
   65. copy_slot_unmasked             $79 = five
   66. copy_slot_unmasked             five = $79
   67. zero_slot_unmasked             $79 = 0
   68. copy_slot_unmasked             sum = $79
   69. zero_slot_unmasked             $79 = 0
   70. copy_slot_unmasked             i = $79
   71. store_loop_mask                $79 = LoopMask
   72. jump                           jump +19 (#91)
   73. zero_slot_unmasked             [for-loop continue mask 1] = 0
   74. store_condition_mask           $80 = CondMask
   75. copy_slot_unmasked             $81 = i
   76. copy_slot_unmasked             $82 = five
   77. cmplt_int                      $81 = lessThan($81, $82)
   78. merge_condition_mask           CondMask = $80 & $81
   79. copy_constant                  $82 = 0xFFFFFFFF
   80. copy_slot_masked               [for-loop continue mask 1] = Mask($82)
   81. mask_off_loop_mask             LoopMask &= ~(CondMask & LoopMask & RetMask)
   82. load_condition_mask            CondMask = $80
   83. copy_2_slots_unmasked          $80..81 = sum(0..1)
   84. add_int                        $80 += $81
   85. copy_slot_masked               sum = Mask($80)
   86. reenable_loop_mask             LoopMask |= [for-loop continue mask 1]
   87. copy_slot_unmasked             $80 = i
   88. copy_constant                  $81 = 0x00000001 (1.401298e-45)
   89. add_int                        $80 += $81
   90. copy_slot_masked               i = Mask($80)
   91. copy_slot_unmasked             $80 = i
   92. copy_slot_unmasked             $81 = kTen
   93. cmplt_int                      $80 = lessThan($80, $81)
   94. merge_loop_mask                LoopMask &= $80
   95. stack_rewind
   96. branch_if_any_active_lanes     branch_if_any_active_lanes -23 (#73)
   97. load_loop_mask                 LoopMask = $79
   98. copy_slot_unmasked             $79 = sum
   99. copy_slot_masked               [continue_loop].result = Mask($79)
  100. load_return_mask               RetMask = $78
  101. copy_slot_unmasked             $78 = [continue_loop].result
  102. copy_constant                  $79 = 0x00000023 (4.904545e-44)
  103. cmpeq_int                      $78 = equal($78, $79)
  104. copy_slot_masked               $77 = Mask($78)
  105. load_condition_mask            CondMask = $8
  106. zero_slot_unmasked             $15 = 0
  107. merge_condition_mask           CondMask = $76 & $77
  108. branch_if_no_active_lanes      branch_if_no_active_lanes +43 (#151)
  109. store_return_mask              $16 = RetMask
  110. copy_constant                  $17 = 0x00000005 (7.006492e-45)
  111. copy_slot_unmasked             five = $17
  112. zero_slot_unmasked             $17 = 0
  113. copy_slot_unmasked             sum = $17
  114. copy_constant                  $17 = 0x00000001 (1.401298e-45)
  115. copy_slot_unmasked             kOne = $17
  116. zero_slot_unmasked             $17 = 0
  117. copy_slot_unmasked             i = $17
  118. store_loop_mask                $17 = LoopMask
  119. jump                           jump +18 (#137)
  120. zero_slot_unmasked             [for-loop continue mask 2] = 0
  121. store_condition_mask           $18 = CondMask
  122. copy_slot_unmasked             $19 = five
  123. copy_slot_unmasked             $20 = i
  124. cmplt_int                      $19 = lessThan($19, $20)
  125. merge_condition_mask           CondMask = $18 & $19
  126. mask_off_loop_mask             LoopMask &= ~(CondMask & LoopMask & RetMask)
  127. load_condition_mask            CondMask = $18
  128. copy_slot_unmasked             $18 = sum
  129. copy_slot_unmasked             $19 = i
  130. add_int                        $18 += $19
  131. copy_slot_masked               sum = Mask($18)
  132. reenable_loop_mask             LoopMask |= [for-loop continue mask 2]
  133. copy_slot_unmasked             $18 = i
  134. copy_slot_unmasked             $19 = kOne
  135. add_int                        $18 += $19
  136. copy_slot_masked               i = Mask($18)
  137. copy_slot_unmasked             $18 = i
  138. copy_constant                  $19 = 0x0000000A (1.401298e-44)
  139. cmplt_int                      $18 = lessThan($18, $19)
  140. merge_loop_mask                LoopMask &= $18
  141. stack_rewind
  142. branch_if_any_active_lanes     branch_if_any_active_lanes -22 (#120)
  143. load_loop_mask                 LoopMask = $17
  144. copy_slot_unmasked             $17 = sum
  145. copy_slot_masked               [break_loop].result = Mask($17)
  146. load_return_mask               RetMask = $16
  147. copy_slot_unmasked             $16 = [break_loop].result
  148. copy_constant                  $17 = 0x0000000F (2.101948e-44)
  149. cmpeq_int                      $16 = equal($16, $17)
  150. copy_slot_masked               $15 = Mask($16)
  151. load_condition_mask            CondMask = $76
  152. zero_slot_unmasked             $66 = 0
  153. merge_condition_mask           CondMask = $14 & $15
  154. branch_if_no_active_lanes      branch_if_no_active_lanes +36 (#190)
  155. store_return_mask              $67 = RetMask
  156. copy_constant                  $68 = 0x00000009 (1.261169e-44)
  157. swizzle_4                      $68..71 = ($68..71).xxxx
  158. copy_4_slots_unmasked          result = $68..71
  159. copy_constant                  $68 = 0x00000001 (1.401298e-45)
  160. copy_slot_unmasked             i = $68
  161. store_loop_mask                $68 = LoopMask
  162. jump                           jump +9 (#171)
  163. zero_slot_unmasked             [for-loop continue mask 3] = 0
  164. copy_4_slots_unmasked          $69..72 = result
  165. copy_4_slots_masked            result = Mask($69..72)
  166. reenable_loop_mask             LoopMask |= [for-loop continue mask 3]
  167. copy_slot_unmasked             $69 = i
  168. copy_constant                  $70 = 0x00000001 (1.401298e-45)
  169. add_int                        $69 += $70
  170. copy_slot_masked               i = Mask($69)
  171. copy_slot_unmasked             $69 = i
  172. copy_constant                  $70 = 0x00000003 (4.203895e-45)
  173. cmple_int                      $69 = lessThanEqual($69, $70)
  174. merge_loop_mask                LoopMask &= $69
  175. stack_rewind
  176. branch_if_any_active_lanes     branch_if_any_active_lanes -13 (#163)
  177. load_loop_mask                 LoopMask = $68
  178. copy_4_slots_unmasked          $68..71 = result
  179. copy_constant                  $72 = 0x00000009 (1.261169e-44)
  180. copy_constant                  $73 = 0x00000001 (1.401298e-45)
  181. copy_constant                  $74 = 0x00000002 (2.802597e-45)
  182. copy_constant                  $75 = 0x00000003 (4.203895e-45)
  183. cmpeq_4_ints                   $68..71 = equal($68..71, $72..75)
  184. bitwise_and_2_ints             $68..69 &= $70..71
  185. bitwise_and_int                $68 &= $69
  186. copy_slot_masked               [loop_operator_le].result = Mask($68)
  187. load_return_mask               RetMask = $67
  188. copy_slot_unmasked             $67 = [loop_operator_le].result
  189. copy_slot_masked               $66 = Mask($67)
  190. load_condition_mask            CondMask = $14
  191. zero_slot_unmasked             $84 = 0
  192. merge_condition_mask           CondMask = $65 & $66
  193. branch_if_no_active_lanes      branch_if_no_active_lanes +36 (#229)
  194. store_return_mask              $85 = RetMask
  195. copy_constant                  $86 = 0x00000009 (1.261169e-44)
  196. swizzle_4                      $86..89 = ($86..89).xxxx
  197. copy_4_slots_unmasked          result = $86..89
  198. copy_constant                  $86 = 0x00000001 (1.401298e-45)
  199. copy_slot_unmasked             i = $86
  200. store_loop_mask                $86 = LoopMask
  201. jump                           jump +9 (#210)
  202. zero_slot_unmasked             [for-loop continue mask 4] = 0
  203. copy_4_slots_unmasked          $87..90 = result
  204. copy_4_slots_masked            result = Mask($87..90)
  205. reenable_loop_mask             LoopMask |= [for-loop continue mask 4]
  206. copy_slot_unmasked             $87 = i
  207. copy_constant                  $88 = 0x00000001 (1.401298e-45)
  208. add_int                        $87 += $88
  209. copy_slot_masked               i = Mask($87)
  210. copy_slot_unmasked             $87 = i
  211. copy_constant                  $88 = 0x00000004 (5.605194e-45)
  212. cmplt_int                      $87 = lessThan($87, $88)
  213. merge_loop_mask                LoopMask &= $87
  214. stack_rewind
  215. branch_if_any_active_lanes     branch_if_any_active_lanes -13 (#202)
  216. load_loop_mask                 LoopMask = $86
  217. copy_4_slots_unmasked          $86..89 = result
  218. copy_constant                  $90 = 0x00000009 (1.261169e-44)
  219. copy_constant                  $91 = 0x00000001 (1.401298e-45)
  220. copy_constant                  $92 = 0x00000002 (2.802597e-45)
  221. copy_constant                  $93 = 0x00000003 (4.203895e-45)
  222. cmpeq_4_ints                   $86..89 = equal($86..89, $90..93)
  223. bitwise_and_2_ints             $86..87 &= $88..89
  224. bitwise_and_int                $86 &= $87
  225. copy_slot_masked               [loop_operator_lt].result = Mask($86)
  226. load_return_mask               RetMask = $85
  227. copy_slot_unmasked             $85 = [loop_operator_lt].result
  228. copy_slot_masked               $84 = Mask($85)
  229. load_condition_mask            CondMask = $65
  230. zero_slot_unmasked             $33 = 0
  231. merge_condition_mask           CondMask = $83 & $84
  232. branch_if_no_active_lanes      branch_if_no_active_lanes +36 (#268)
  233. store_return_mask              $34 = RetMask
  234. copy_constant                  $35 = 0x00000009 (1.261169e-44)
  235. swizzle_4                      $35..38 = ($35..38).xxxx
  236. copy_4_slots_unmasked          result = $35..38
  237. copy_constant                  $35 = 0x00000003 (4.203895e-45)
  238. copy_slot_unmasked             i = $35
  239. store_loop_mask                $35 = LoopMask
  240. jump                           jump +9 (#249)
  241. zero_slot_unmasked             [for-loop continue mask 5] = 0
  242. copy_4_slots_unmasked          $36..39 = result
  243. copy_4_slots_masked            result = Mask($36..39)
  244. reenable_loop_mask             LoopMask |= [for-loop continue mask 5]
  245. copy_slot_unmasked             $36 = i
  246. copy_constant                  $37 = 0x00000001 (1.401298e-45)
  247. sub_int                        $36 -= $37
  248. copy_slot_masked               i = Mask($36)
  249. copy_constant                  $36 = 0x00000001 (1.401298e-45)
  250. copy_slot_unmasked             $37 = i
  251. cmple_int                      $36 = lessThanEqual($36, $37)
  252. merge_loop_mask                LoopMask &= $36
  253. stack_rewind
  254. branch_if_any_active_lanes     branch_if_any_active_lanes -13 (#241)
  255. load_loop_mask                 LoopMask = $35
  256. copy_4_slots_unmasked          $35..38 = result
  257. copy_constant                  $39 = 0x00000009 (1.261169e-44)
  258. copy_constant                  $40 = 0x00000003 (4.203895e-45)
  259. copy_constant                  $41 = 0x00000002 (2.802597e-45)
  260. copy_constant                  $42 = 0x00000001 (1.401298e-45)
  261. cmpeq_4_ints                   $35..38 = equal($35..38, $39..42)
  262. bitwise_and_2_ints             $35..36 &= $37..38
  263. bitwise_and_int                $35 &= $36
  264. copy_slot_masked               [loop_operator_ge].result = Mask($35)
  265. load_return_mask               RetMask = $34
  266. copy_slot_unmasked             $34 = [loop_operator_ge].result
  267. copy_slot_masked               $33 = Mask($34)
  268. load_condition_mask            CondMask = $83
  269. zero_slot_unmasked             $55 = 0
  270. merge_condition_mask           CondMask = $32 & $33
  271. branch_if_no_active_lanes      branch_if_no_active_lanes +36 (#307)
  272. store_return_mask              $56 = RetMask
  273. copy_constant                  $57 = 0x00000009 (1.261169e-44)
  274. swizzle_4                      $57..60 = ($57..60).xxxx
  275. copy_4_slots_unmasked          result = $57..60
  276. copy_constant                  $57 = 0x00000003 (4.203895e-45)
  277. copy_slot_unmasked             i = $57
  278. store_loop_mask                $57 = LoopMask
  279. jump                           jump +9 (#288)
  280. zero_slot_unmasked             [for-loop continue mask 6] = 0
  281. copy_4_slots_unmasked          $58..61 = result
  282. copy_4_slots_masked            result = Mask($58..61)
  283. reenable_loop_mask             LoopMask |= [for-loop continue mask 6]
  284. copy_slot_unmasked             $58 = i
  285. copy_constant                  $59 = 0x00000001 (1.401298e-45)
  286. sub_int                        $58 -= $59
  287. copy_slot_masked               i = Mask($58)
  288. zero_slot_unmasked             $58 = 0
  289. copy_slot_unmasked             $59 = i
  290. cmplt_int                      $58 = lessThan($58, $59)
  291. merge_loop_mask                LoopMask &= $58
  292. stack_rewind
  293. branch_if_any_active_lanes     branch_if_any_active_lanes -13 (#280)
  294. load_loop_mask                 LoopMask = $57
  295. copy_4_slots_unmasked          $57..60 = result
  296. copy_constant                  $61 = 0x00000009 (1.261169e-44)
  297. copy_constant                  $62 = 0x00000003 (4.203895e-45)
  298. copy_constant                  $63 = 0x00000002 (2.802597e-45)
  299. copy_constant                  $64 = 0x00000001 (1.401298e-45)
  300. cmpeq_4_ints                   $57..60 = equal($57..60, $61..64)
  301. bitwise_and_2_ints             $57..58 &= $59..60
  302. bitwise_and_int                $57 &= $58
  303. copy_slot_masked               [loop_operator_gt].result = Mask($57)
  304. load_return_mask               RetMask = $56
  305. copy_slot_unmasked             $56 = [loop_operator_gt].result
  306. copy_slot_masked               $55 = Mask($56)
  307. load_condition_mask            CondMask = $32
  308. zero_slot_unmasked             $44 = 0
  309. merge_condition_mask           CondMask = $54 & $55
  310. branch_if_no_active_lanes      branch_if_no_active_lanes +36 (#346)
  311. store_return_mask              $45 = RetMask
  312. copy_constant                  $46 = 0x00000009 (1.261169e-44)
  313. swizzle_4                      $46..49 = ($46..49).xxxx
  314. copy_4_slots_unmasked          result = $46..49
  315. copy_constant                  $46 = 0x00000001 (1.401298e-45)
  316. copy_slot_unmasked             i = $46
  317. store_loop_mask                $46 = LoopMask
  318. jump                           jump +9 (#327)
  319. zero_slot_unmasked             [for-loop continue mask 7] = 0
  320. copy_4_slots_unmasked          $47..50 = result
  321. copy_4_slots_masked            result = Mask($47..50)
  322. reenable_loop_mask             LoopMask |= [for-loop continue mask 7]
  323. copy_slot_unmasked             $47 = i
  324. copy_constant                  $48 = 0x00000001 (1.401298e-45)
  325. add_int                        $47 += $48
  326. copy_slot_masked               i = Mask($47)
  327. copy_slot_unmasked             $47 = i
  328. copy_constant                  $48 = 0x00000001 (1.401298e-45)
  329. cmpeq_int                      $47 = equal($47, $48)
  330. merge_loop_mask                LoopMask &= $47
  331. stack_rewind
  332. branch_if_any_active_lanes     branch_if_any_active_lanes -13 (#319)
  333. load_loop_mask                 LoopMask = $46
  334. copy_4_slots_unmasked          $46..49 = result
  335. copy_constant                  $50 = 0x00000009 (1.261169e-44)
  336. copy_constant                  $51 = 0x00000009 (1.261169e-44)
  337. copy_constant                  $52 = 0x00000009 (1.261169e-44)
  338. copy_constant                  $53 = 0x00000001 (1.401298e-45)
  339. cmpeq_4_ints                   $46..49 = equal($46..49, $50..53)
  340. bitwise_and_2_ints             $46..47 &= $48..49
  341. bitwise_and_int                $46 &= $47
  342. copy_slot_masked               [loop_operator_eq].result = Mask($46)
  343. load_return_mask               RetMask = $45
  344. copy_slot_unmasked             $45 = [loop_operator_eq].result
  345. copy_slot_masked               $44 = Mask($45)
  346. load_condition_mask            CondMask = $54
  347. zero_slot_unmasked             $22 = 0
  348. merge_condition_mask           CondMask = $43 & $44
  349. branch_if_no_active_lanes      branch_if_no_active_lanes +36 (#385)
  350. store_return_mask              $23 = RetMask
  351. copy_constant                  $24 = 0x00000009 (1.261169e-44)
  352. swizzle_4                      $24..27 = ($24..27).xxxx
  353. copy_4_slots_unmasked          result = $24..27
  354. copy_constant                  $24 = 0x00000001 (1.401298e-45)
  355. copy_slot_unmasked             i = $24
  356. store_loop_mask                $24 = LoopMask
  357. jump                           jump +9 (#366)
  358. zero_slot_unmasked             [for-loop continue mask 8] = 0
  359. copy_4_slots_unmasked          $25..28 = result
  360. copy_4_slots_masked            result = Mask($25..28)
  361. reenable_loop_mask             LoopMask |= [for-loop continue mask 8]
  362. copy_slot_unmasked             $25 = i
  363. copy_constant                  $26 = 0x00000001 (1.401298e-45)
  364. add_int                        $25 += $26
  365. copy_slot_masked               i = Mask($25)
  366. copy_slot_unmasked             $25 = i
  367. copy_constant                  $26 = 0x00000004 (5.605194e-45)
  368. cmpne_int                      $25 = notEqual($25, $26)
  369. merge_loop_mask                LoopMask &= $25
  370. stack_rewind
  371. branch_if_any_active_lanes     branch_if_any_active_lanes -13 (#358)
  372. load_loop_mask                 LoopMask = $24
  373. copy_4_slots_unmasked          $24..27 = result
  374. copy_constant                  $28 = 0x00000009 (1.261169e-44)
  375. copy_constant                  $29 = 0x00000001 (1.401298e-45)
  376. copy_constant                  $30 = 0x00000002 (2.802597e-45)
  377. copy_constant                  $31 = 0x00000003 (4.203895e-45)
  378. cmpeq_4_ints                   $24..27 = equal($24..27, $28..31)
  379. bitwise_and_2_ints             $24..25 &= $26..27
  380. bitwise_and_int                $24 &= $25
  381. copy_slot_masked               [loop_operator_ne].result = Mask($24)
  382. load_return_mask               RetMask = $23
  383. copy_slot_unmasked             $23 = [loop_operator_ne].result
  384. copy_slot_masked               $22 = Mask($23)
  385. load_condition_mask            CondMask = $43
  386. copy_4_constants               $0..3 = colorRed
  387. merge_condition_mask           CondMask = $21 & $22
  388. copy_4_constants               $4..7 = colorGreen
  389. copy_4_slots_masked            $0..3 = Mask($4..7)
  390. load_condition_mask            CondMask = $21
  391. copy_4_slots_masked            [main].result = Mask($0..3)
  392. mask_off_return_mask           RetMask &= ~(CondMask & LoopMask & RetMask)
  393. load_src                       src.rgba = [main].result
