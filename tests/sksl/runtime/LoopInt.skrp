    1. store_src_rg                   pos = src.rg
    2. init_lane_masks                CondMask = LoopMask = RetMask = true
    3. zero_slot_unmasked             $0 = 0
    4. copy_slot_unmasked             kZero = $0
    5. copy_constant                  $0 = 0x0000000A (1.401298e-44)
    6. copy_slot_unmasked             kTen = $0
    7. copy_slot_unmasked             $0 = pos(0)
    8. copy_constant                  $1 = colorGreen(1)
    9. max_float                      $0 = max($0, $1)
   10. copy_constant                  $1 = colorGreen(3)
   11. min_float                      $0 = min($0, $1)
   12. cast_to_int_from_float         $0 = FloatToInt($0)
   13. copy_constant                  $1 = 0x00000005 (7.006492e-45)
   14. mul_int                        $0 *= $1
   15. copy_slot_unmasked             five = $0
   16. store_condition_mask           $21 = CondMask
   17. store_condition_mask           $43 = CondMask
   18. store_condition_mask           $54 = CondMask
   19. store_condition_mask           $32 = CondMask
   20. store_condition_mask           $83 = CondMask
   21. store_condition_mask           $65 = CondMask
   22. store_condition_mask           $14 = CondMask
   23. store_condition_mask           $76 = CondMask
   24. store_condition_mask           $8 = CondMask
   25. branch_if_no_active_lanes      branch_if_no_active_lanes +35 (#60)
   26. store_return_mask              $9 = RetMask
   27. copy_slot_unmasked             $10 = five
   28. copy_slot_unmasked             five = $10
   29. copy_slot_unmasked             $10 = kZero
   30. copy_slot_unmasked             i = $10
   31. store_loop_mask                $10 = LoopMask
   32. jump                           jump +16 (#48)
   33. zero_slot_unmasked             [for-loop continue mask 0] = 0
   34. store_condition_mask           $11 = CondMask
   35. copy_slot_unmasked             $12 = i
   36. copy_slot_unmasked             $13 = five
   37. cmpeq_int                      $12 = equal($12, $13)
   38. merge_condition_mask           CondMask = $11 & $12
   39. copy_slot_unmasked             $13 = i
   40. copy_slot_masked               [return_loop].result = Mask($13)
   41. mask_off_return_mask           RetMask &= ~(CondMask & LoopMask & RetMask)
   42. load_condition_mask            CondMask = $11
   43. reenable_loop_mask             LoopMask |= [for-loop continue mask 0]
   44. copy_slot_unmasked             $11 = i
   45. copy_constant                  $12 = 0x00000001 (1.401298e-45)
   46. add_int                        $11 += $12
   47. copy_slot_masked               i = Mask($11)
   48. copy_slot_unmasked             $11 = i
   49. copy_constant                  $12 = 0x0000000A (1.401298e-44)
   50. cmplt_int                      $11 = lessThan($11, $12)
   51. merge_loop_mask                LoopMask &= $11
   52. stack_rewind
   53. branch_if_any_active_lanes     branch_if_any_active_lanes -20 (#33)
   54. load_loop_mask                 LoopMask = $10
   55. zero_slot_unmasked             $10 = 0
   56. copy_slot_masked               [return_loop].result = Mask($10)
   57. mask_off_return_mask           RetMask &= ~(CondMask & LoopMask & RetMask)
   58. load_return_mask               RetMask = $9
   59. copy_slot_unmasked             $9 = [return_loop].result
   60. copy_constant                  $10 = 0x00000005 (7.006492e-45)
   61. cmpeq_int                      $9 = equal($9, $10)
   62. zero_slot_unmasked             $77 = 0
   63. merge_condition_mask           CondMask = $8 & $9
   64. branch_if_no_active_lanes      branch_if_no_active_lanes +44 (#108)
   65. store_return_mask              $78 = RetMask
   66. copy_slot_unmasked             $79 = five
   67. copy_slot_unmasked             five = $79
   68. zero_slot_unmasked             $79 = 0
   69. copy_slot_unmasked             sum = $79
   70. zero_slot_unmasked             $79 = 0
   71. copy_slot_unmasked             i = $79
   72. store_loop_mask                $79 = LoopMask
   73. jump                           jump +20 (#93)
   74. zero_slot_unmasked             [for-loop continue mask 1] = 0
   75. store_condition_mask           $80 = CondMask
   76. copy_slot_unmasked             $81 = i
   77. copy_slot_unmasked             $82 = five
   78. cmplt_int                      $81 = lessThan($81, $82)
   79. merge_condition_mask           CondMask = $80 & $81
   80. copy_constant                  $82 = 0xFFFFFFFF
   81. copy_slot_masked               [for-loop continue mask 1] = Mask($82)
   82. mask_off_loop_mask             LoopMask &= ~(CondMask & LoopMask & RetMask)
   83. load_condition_mask            CondMask = $80
   84. copy_slot_unmasked             $80 = sum
   85. copy_slot_unmasked             $81 = i
   86. add_int                        $80 += $81
   87. copy_slot_masked               sum = Mask($80)
   88. reenable_loop_mask             LoopMask |= [for-loop continue mask 1]
   89. copy_slot_unmasked             $80 = i
   90. copy_constant                  $81 = 0x00000001 (1.401298e-45)
   91. add_int                        $80 += $81
   92. copy_slot_masked               i = Mask($80)
   93. copy_slot_unmasked             $80 = i
   94. copy_slot_unmasked             $81 = kTen
   95. cmplt_int                      $80 = lessThan($80, $81)
   96. merge_loop_mask                LoopMask &= $80
   97. stack_rewind
   98. branch_if_any_active_lanes     branch_if_any_active_lanes -24 (#74)
   99. load_loop_mask                 LoopMask = $79
  100. copy_slot_unmasked             $79 = sum
  101. copy_slot_masked               [continue_loop].result = Mask($79)
  102. mask_off_return_mask           RetMask &= ~(CondMask & LoopMask & RetMask)
  103. load_return_mask               RetMask = $78
  104. copy_slot_unmasked             $78 = [continue_loop].result
  105. copy_constant                  $79 = 0x00000023 (4.904545e-44)
  106. cmpeq_int                      $78 = equal($78, $79)
  107. copy_slot_masked               $77 = Mask($78)
  108. load_condition_mask            CondMask = $8
  109. zero_slot_unmasked             $15 = 0
  110. merge_condition_mask           CondMask = $76 & $77
  111. branch_if_no_active_lanes      branch_if_no_active_lanes +44 (#155)
  112. store_return_mask              $16 = RetMask
  113. copy_constant                  $17 = 0x00000005 (7.006492e-45)
  114. copy_slot_unmasked             five = $17
  115. zero_slot_unmasked             $17 = 0
  116. copy_slot_unmasked             sum = $17
  117. copy_constant                  $17 = 0x00000001 (1.401298e-45)
  118. copy_slot_unmasked             kOne = $17
  119. zero_slot_unmasked             $17 = 0
  120. copy_slot_unmasked             i = $17
  121. store_loop_mask                $17 = LoopMask
  122. jump                           jump +18 (#140)
  123. zero_slot_unmasked             [for-loop continue mask 2] = 0
  124. store_condition_mask           $18 = CondMask
  125. copy_slot_unmasked             $19 = five
  126. copy_slot_unmasked             $20 = i
  127. cmplt_int                      $19 = lessThan($19, $20)
  128. merge_condition_mask           CondMask = $18 & $19
  129. mask_off_loop_mask             LoopMask &= ~(CondMask & LoopMask & RetMask)
  130. load_condition_mask            CondMask = $18
  131. copy_slot_unmasked             $18 = sum
  132. copy_slot_unmasked             $19 = i
  133. add_int                        $18 += $19
  134. copy_slot_masked               sum = Mask($18)
  135. reenable_loop_mask             LoopMask |= [for-loop continue mask 2]
  136. copy_slot_unmasked             $18 = i
  137. copy_slot_unmasked             $19 = kOne
  138. add_int                        $18 += $19
  139. copy_slot_masked               i = Mask($18)
  140. copy_slot_unmasked             $18 = i
  141. copy_constant                  $19 = 0x0000000A (1.401298e-44)
  142. cmplt_int                      $18 = lessThan($18, $19)
  143. merge_loop_mask                LoopMask &= $18
  144. stack_rewind
  145. branch_if_any_active_lanes     branch_if_any_active_lanes -22 (#123)
  146. load_loop_mask                 LoopMask = $17
  147. copy_slot_unmasked             $17 = sum
  148. copy_slot_masked               [break_loop].result = Mask($17)
  149. mask_off_return_mask           RetMask &= ~(CondMask & LoopMask & RetMask)
  150. load_return_mask               RetMask = $16
  151. copy_slot_unmasked             $16 = [break_loop].result
  152. copy_constant                  $17 = 0x0000000F (2.101948e-44)
  153. cmpeq_int                      $16 = equal($16, $17)
  154. copy_slot_masked               $15 = Mask($16)
  155. load_condition_mask            CondMask = $76
  156. zero_slot_unmasked             $66 = 0
  157. merge_condition_mask           CondMask = $14 & $15
  158. branch_if_no_active_lanes      branch_if_no_active_lanes +38 (#196)
  159. store_return_mask              $67 = RetMask
  160. copy_constant                  $68 = 0x00000009 (1.261169e-44)
  161. swizzle_4                      $68..71 = ($68..71).xxxx
  162. copy_4_slots_unmasked          result = $68..71
  163. copy_constant                  $68 = 0x00000001 (1.401298e-45)
  164. copy_slot_unmasked             i = $68
  165. store_loop_mask                $68 = LoopMask
  166. jump                           jump +10 (#176)
  167. zero_slot_unmasked             [for-loop continue mask 3] = 0
  168. copy_3_slots_unmasked          $69..71 = result(1..3)
  169. copy_slot_unmasked             $72 = i
  170. copy_4_slots_masked            result = Mask($69..72)
  171. reenable_loop_mask             LoopMask |= [for-loop continue mask 3]
  172. copy_slot_unmasked             $69 = i
  173. copy_constant                  $70 = 0x00000001 (1.401298e-45)
  174. add_int                        $69 += $70
  175. copy_slot_masked               i = Mask($69)
  176. copy_slot_unmasked             $69 = i
  177. copy_constant                  $70 = 0x00000003 (4.203895e-45)
  178. cmple_int                      $69 = lessThanEqual($69, $70)
  179. merge_loop_mask                LoopMask &= $69
  180. stack_rewind
  181. branch_if_any_active_lanes     branch_if_any_active_lanes -14 (#167)
  182. load_loop_mask                 LoopMask = $68
  183. copy_4_slots_unmasked          $68..71 = result
  184. copy_constant                  $72 = 0x00000009 (1.261169e-44)
  185. copy_constant                  $73 = 0x00000001 (1.401298e-45)
  186. copy_constant                  $74 = 0x00000002 (2.802597e-45)
  187. copy_constant                  $75 = 0x00000003 (4.203895e-45)
  188. cmpeq_4_ints                   $68..71 = equal($68..71, $72..75)
  189. bitwise_and_2_ints             $68..69 &= $70..71
  190. bitwise_and_int                $68 &= $69
  191. copy_slot_masked               [loop_operator_le].result = Mask($68)
  192. mask_off_return_mask           RetMask &= ~(CondMask & LoopMask & RetMask)
  193. load_return_mask               RetMask = $67
  194. copy_slot_unmasked             $67 = [loop_operator_le].result
  195. copy_slot_masked               $66 = Mask($67)
  196. load_condition_mask            CondMask = $14
  197. zero_slot_unmasked             $84 = 0
  198. merge_condition_mask           CondMask = $65 & $66
  199. branch_if_no_active_lanes      branch_if_no_active_lanes +38 (#237)
  200. store_return_mask              $85 = RetMask
  201. copy_constant                  $86 = 0x00000009 (1.261169e-44)
  202. swizzle_4                      $86..89 = ($86..89).xxxx
  203. copy_4_slots_unmasked          result = $86..89
  204. copy_constant                  $86 = 0x00000001 (1.401298e-45)
  205. copy_slot_unmasked             i = $86
  206. store_loop_mask                $86 = LoopMask
  207. jump                           jump +10 (#217)
  208. zero_slot_unmasked             [for-loop continue mask 4] = 0
  209. copy_3_slots_unmasked          $87..89 = result(1..3)
  210. copy_slot_unmasked             $90 = i
  211. copy_4_slots_masked            result = Mask($87..90)
  212. reenable_loop_mask             LoopMask |= [for-loop continue mask 4]
  213. copy_slot_unmasked             $87 = i
  214. copy_constant                  $88 = 0x00000001 (1.401298e-45)
  215. add_int                        $87 += $88
  216. copy_slot_masked               i = Mask($87)
  217. copy_slot_unmasked             $87 = i
  218. copy_constant                  $88 = 0x00000004 (5.605194e-45)
  219. cmplt_int                      $87 = lessThan($87, $88)
  220. merge_loop_mask                LoopMask &= $87
  221. stack_rewind
  222. branch_if_any_active_lanes     branch_if_any_active_lanes -14 (#208)
  223. load_loop_mask                 LoopMask = $86
  224. copy_4_slots_unmasked          $86..89 = result
  225. copy_constant                  $90 = 0x00000009 (1.261169e-44)
  226. copy_constant                  $91 = 0x00000001 (1.401298e-45)
  227. copy_constant                  $92 = 0x00000002 (2.802597e-45)
  228. copy_constant                  $93 = 0x00000003 (4.203895e-45)
  229. cmpeq_4_ints                   $86..89 = equal($86..89, $90..93)
  230. bitwise_and_2_ints             $86..87 &= $88..89
  231. bitwise_and_int                $86 &= $87
  232. copy_slot_masked               [loop_operator_lt].result = Mask($86)
  233. mask_off_return_mask           RetMask &= ~(CondMask & LoopMask & RetMask)
  234. load_return_mask               RetMask = $85
  235. copy_slot_unmasked             $85 = [loop_operator_lt].result
  236. copy_slot_masked               $84 = Mask($85)
  237. load_condition_mask            CondMask = $65
  238. zero_slot_unmasked             $33 = 0
  239. merge_condition_mask           CondMask = $83 & $84
  240. branch_if_no_active_lanes      branch_if_no_active_lanes +38 (#278)
  241. store_return_mask              $34 = RetMask
  242. copy_constant                  $35 = 0x00000009 (1.261169e-44)
  243. swizzle_4                      $35..38 = ($35..38).xxxx
  244. copy_4_slots_unmasked          result = $35..38
  245. copy_constant                  $35 = 0x00000003 (4.203895e-45)
  246. copy_slot_unmasked             i = $35
  247. store_loop_mask                $35 = LoopMask
  248. jump                           jump +10 (#258)
  249. zero_slot_unmasked             [for-loop continue mask 5] = 0
  250. copy_3_slots_unmasked          $36..38 = result(1..3)
  251. copy_slot_unmasked             $39 = i
  252. copy_4_slots_masked            result = Mask($36..39)
  253. reenable_loop_mask             LoopMask |= [for-loop continue mask 5]
  254. copy_slot_unmasked             $36 = i
  255. copy_constant                  $37 = 0x00000001 (1.401298e-45)
  256. sub_int                        $36 -= $37
  257. copy_slot_masked               i = Mask($36)
  258. copy_constant                  $36 = 0x00000001 (1.401298e-45)
  259. copy_slot_unmasked             $37 = i
  260. cmple_int                      $36 = lessThanEqual($36, $37)
  261. merge_loop_mask                LoopMask &= $36
  262. stack_rewind
  263. branch_if_any_active_lanes     branch_if_any_active_lanes -14 (#249)
  264. load_loop_mask                 LoopMask = $35
  265. copy_4_slots_unmasked          $35..38 = result
  266. copy_constant                  $39 = 0x00000009 (1.261169e-44)
  267. copy_constant                  $40 = 0x00000003 (4.203895e-45)
  268. copy_constant                  $41 = 0x00000002 (2.802597e-45)
  269. copy_constant                  $42 = 0x00000001 (1.401298e-45)
  270. cmpeq_4_ints                   $35..38 = equal($35..38, $39..42)
  271. bitwise_and_2_ints             $35..36 &= $37..38
  272. bitwise_and_int                $35 &= $36
  273. copy_slot_masked               [loop_operator_ge].result = Mask($35)
  274. mask_off_return_mask           RetMask &= ~(CondMask & LoopMask & RetMask)
  275. load_return_mask               RetMask = $34
  276. copy_slot_unmasked             $34 = [loop_operator_ge].result
  277. copy_slot_masked               $33 = Mask($34)
  278. load_condition_mask            CondMask = $83
  279. zero_slot_unmasked             $55 = 0
  280. merge_condition_mask           CondMask = $32 & $33
  281. branch_if_no_active_lanes      branch_if_no_active_lanes +38 (#319)
  282. store_return_mask              $56 = RetMask
  283. copy_constant                  $57 = 0x00000009 (1.261169e-44)
  284. swizzle_4                      $57..60 = ($57..60).xxxx
  285. copy_4_slots_unmasked          result = $57..60
  286. copy_constant                  $57 = 0x00000003 (4.203895e-45)
  287. copy_slot_unmasked             i = $57
  288. store_loop_mask                $57 = LoopMask
  289. jump                           jump +10 (#299)
  290. zero_slot_unmasked             [for-loop continue mask 6] = 0
  291. copy_3_slots_unmasked          $58..60 = result(1..3)
  292. copy_slot_unmasked             $61 = i
  293. copy_4_slots_masked            result = Mask($58..61)
  294. reenable_loop_mask             LoopMask |= [for-loop continue mask 6]
  295. copy_slot_unmasked             $58 = i
  296. copy_constant                  $59 = 0x00000001 (1.401298e-45)
  297. sub_int                        $58 -= $59
  298. copy_slot_masked               i = Mask($58)
  299. zero_slot_unmasked             $58 = 0
  300. copy_slot_unmasked             $59 = i
  301. cmplt_int                      $58 = lessThan($58, $59)
  302. merge_loop_mask                LoopMask &= $58
  303. stack_rewind
  304. branch_if_any_active_lanes     branch_if_any_active_lanes -14 (#290)
  305. load_loop_mask                 LoopMask = $57
  306. copy_4_slots_unmasked          $57..60 = result
  307. copy_constant                  $61 = 0x00000009 (1.261169e-44)
  308. copy_constant                  $62 = 0x00000003 (4.203895e-45)
  309. copy_constant                  $63 = 0x00000002 (2.802597e-45)
  310. copy_constant                  $64 = 0x00000001 (1.401298e-45)
  311. cmpeq_4_ints                   $57..60 = equal($57..60, $61..64)
  312. bitwise_and_2_ints             $57..58 &= $59..60
  313. bitwise_and_int                $57 &= $58
  314. copy_slot_masked               [loop_operator_gt].result = Mask($57)
  315. mask_off_return_mask           RetMask &= ~(CondMask & LoopMask & RetMask)
  316. load_return_mask               RetMask = $56
  317. copy_slot_unmasked             $56 = [loop_operator_gt].result
  318. copy_slot_masked               $55 = Mask($56)
  319. load_condition_mask            CondMask = $32
  320. zero_slot_unmasked             $44 = 0
  321. merge_condition_mask           CondMask = $54 & $55
  322. branch_if_no_active_lanes      branch_if_no_active_lanes +38 (#360)
  323. store_return_mask              $45 = RetMask
  324. copy_constant                  $46 = 0x00000009 (1.261169e-44)
  325. swizzle_4                      $46..49 = ($46..49).xxxx
  326. copy_4_slots_unmasked          result = $46..49
  327. copy_constant                  $46 = 0x00000001 (1.401298e-45)
  328. copy_slot_unmasked             i = $46
  329. store_loop_mask                $46 = LoopMask
  330. jump                           jump +10 (#340)
  331. zero_slot_unmasked             [for-loop continue mask 7] = 0
  332. copy_3_slots_unmasked          $47..49 = result(1..3)
  333. copy_slot_unmasked             $50 = i
  334. copy_4_slots_masked            result = Mask($47..50)
  335. reenable_loop_mask             LoopMask |= [for-loop continue mask 7]
  336. copy_slot_unmasked             $47 = i
  337. copy_constant                  $48 = 0x00000001 (1.401298e-45)
  338. add_int                        $47 += $48
  339. copy_slot_masked               i = Mask($47)
  340. copy_slot_unmasked             $47 = i
  341. copy_constant                  $48 = 0x00000001 (1.401298e-45)
  342. cmpeq_int                      $47 = equal($47, $48)
  343. merge_loop_mask                LoopMask &= $47
  344. stack_rewind
  345. branch_if_any_active_lanes     branch_if_any_active_lanes -14 (#331)
  346. load_loop_mask                 LoopMask = $46
  347. copy_4_slots_unmasked          $46..49 = result
  348. copy_constant                  $50 = 0x00000009 (1.261169e-44)
  349. copy_constant                  $51 = 0x00000009 (1.261169e-44)
  350. copy_constant                  $52 = 0x00000009 (1.261169e-44)
  351. copy_constant                  $53 = 0x00000001 (1.401298e-45)
  352. cmpeq_4_ints                   $46..49 = equal($46..49, $50..53)
  353. bitwise_and_2_ints             $46..47 &= $48..49
  354. bitwise_and_int                $46 &= $47
  355. copy_slot_masked               [loop_operator_eq].result = Mask($46)
  356. mask_off_return_mask           RetMask &= ~(CondMask & LoopMask & RetMask)
  357. load_return_mask               RetMask = $45
  358. copy_slot_unmasked             $45 = [loop_operator_eq].result
  359. copy_slot_masked               $44 = Mask($45)
  360. load_condition_mask            CondMask = $54
  361. zero_slot_unmasked             $22 = 0
  362. merge_condition_mask           CondMask = $43 & $44
  363. branch_if_no_active_lanes      branch_if_no_active_lanes +38 (#401)
  364. store_return_mask              $23 = RetMask
  365. copy_constant                  $24 = 0x00000009 (1.261169e-44)
  366. swizzle_4                      $24..27 = ($24..27).xxxx
  367. copy_4_slots_unmasked          result = $24..27
  368. copy_constant                  $24 = 0x00000001 (1.401298e-45)
  369. copy_slot_unmasked             i = $24
  370. store_loop_mask                $24 = LoopMask
  371. jump                           jump +10 (#381)
  372. zero_slot_unmasked             [for-loop continue mask 8] = 0
  373. copy_3_slots_unmasked          $25..27 = result(1..3)
  374. copy_slot_unmasked             $28 = i
  375. copy_4_slots_masked            result = Mask($25..28)
  376. reenable_loop_mask             LoopMask |= [for-loop continue mask 8]
  377. copy_slot_unmasked             $25 = i
  378. copy_constant                  $26 = 0x00000001 (1.401298e-45)
  379. add_int                        $25 += $26
  380. copy_slot_masked               i = Mask($25)
  381. copy_slot_unmasked             $25 = i
  382. copy_constant                  $26 = 0x00000004 (5.605194e-45)
  383. cmpne_int                      $25 = notEqual($25, $26)
  384. merge_loop_mask                LoopMask &= $25
  385. stack_rewind
  386. branch_if_any_active_lanes     branch_if_any_active_lanes -14 (#372)
  387. load_loop_mask                 LoopMask = $24
  388. copy_4_slots_unmasked          $24..27 = result
  389. copy_constant                  $28 = 0x00000009 (1.261169e-44)
  390. copy_constant                  $29 = 0x00000001 (1.401298e-45)
  391. copy_constant                  $30 = 0x00000002 (2.802597e-45)
  392. copy_constant                  $31 = 0x00000003 (4.203895e-45)
  393. cmpeq_4_ints                   $24..27 = equal($24..27, $28..31)
  394. bitwise_and_2_ints             $24..25 &= $26..27
  395. bitwise_and_int                $24 &= $25
  396. copy_slot_masked               [loop_operator_ne].result = Mask($24)
  397. mask_off_return_mask           RetMask &= ~(CondMask & LoopMask & RetMask)
  398. load_return_mask               RetMask = $23
  399. copy_slot_unmasked             $23 = [loop_operator_ne].result
  400. copy_slot_masked               $22 = Mask($23)
  401. load_condition_mask            CondMask = $43
  402. copy_4_constants               $0..3 = colorRed
  403. merge_condition_mask           CondMask = $21 & $22
  404. copy_4_constants               $4..7 = colorGreen
  405. copy_4_slots_masked            $0..3 = Mask($4..7)
  406. load_condition_mask            CondMask = $21
  407. copy_4_slots_masked            [main].result = Mask($0..3)
  408. mask_off_return_mask           RetMask &= ~(CondMask & LoopMask & RetMask)
  409. load_src                       src.rgba = [main].result
