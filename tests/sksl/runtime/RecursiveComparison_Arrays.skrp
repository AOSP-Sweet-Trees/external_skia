    1. store_src_rg                   coords = src.rg
    2. init_lane_masks                CondMask = LoopMask = RetMask = true
    3. copy_constant                  $0 = colorGreen(0)
    4. copy_constant                  $1 = colorGreen(2)
    5. div_float                      $0 /= $1
    6. copy_slot_unmasked             NAN1 = $0
    7. copy_constant                  $0 = colorGreen(2)
    8. copy_constant                  $1 = colorGreen(0)
    9. div_float                      $0 /= $1
   10. copy_slot_unmasked             NAN2 = $0
   11. copy_constant                  $0 = colorGreen(0)
   12. copy_constant                  $1 = colorGreen(2)
   13. mul_float                      $0 *= $1
   14. copy_slot_unmasked             ZP = $0
   15. zero_slot_unmasked             $0 = 0
   16. copy_constant                  $1 = colorGreen(0)
   17. sub_float                      $0 -= $1
   18. copy_constant                  $1 = colorGreen(2)
   19. mul_float                      $0 *= $1
   20. copy_slot_unmasked             ZM = $0
   21. copy_constant                  $0 = colorGreen(1)
   22. copy_constant                  $1 = 0x42280000 (42.0)
   23. mul_float                      $0 *= $1
   24. copy_slot_unmasked             F42 = $0
   25. copy_constant                  $0 = colorGreen(1)
   26. copy_constant                  $1 = 0x422C0000 (43.0)
   27. mul_float                      $0 *= $1
   28. copy_slot_unmasked             F43 = $0
   29. copy_constant                  $0 = colorGreen(1)
   30. copy_constant                  $1 = 0x42300000 (44.0)
   31. mul_float                      $0 *= $1
   32. copy_slot_unmasked             F44 = $0
   33. copy_constant                  $0 = 0xFFFFFFFF
   34. copy_slot_unmasked             EQ = $0
   35. zero_slot_unmasked             $0 = 0
   36. copy_slot_unmasked             NE = $0
   37. copy_constant                  $0 = colorGreen(0)
   38. copy_constant                  $1 = 0x3F800000 (1.0)
   39. add_float                      $0 += $1
   40. copy_slot_unmasked             _0_one = $0
   41. zero_3_slots_unmasked          _1_a[0](0..2) = 0
   42. copy_slot_unmasked             $0 = F42
   43. copy_slot_masked               _1_a[0] = Mask($0)
   44. copy_slot_unmasked             $0 = ZM
   45. copy_slot_masked               _1_a[1] = Mask($0)
   46. copy_slot_unmasked             $0 = ZP
   47. copy_slot_masked               _1_a[2] = Mask($0)
   48. zero_3_slots_unmasked          _2_b[0](0..2) = 0
   49. copy_slot_unmasked             $0 = F42
   50. copy_slot_unmasked             $1 = _0_one
   51. mul_float                      $0 *= $1
   52. copy_slot_masked               _2_b[0] = Mask($0)
   53. copy_slot_unmasked             $0 = ZM
   54. copy_slot_unmasked             $1 = _0_one
   55. mul_float                      $0 *= $1
   56. copy_slot_masked               _2_b[1] = Mask($0)
   57. copy_slot_unmasked             $0 = ZP
   58. copy_slot_unmasked             $1 = _0_one
   59. mul_float                      $0 *= $1
   60. copy_slot_masked               _2_b[2] = Mask($0)
   61. store_condition_mask           $20 = CondMask
   62. store_condition_mask           $40 = CondMask
   63. store_condition_mask           $50 = CondMask
   64. store_condition_mask           $30 = CondMask
   65. store_condition_mask           $78 = CondMask
   66. store_condition_mask           $60 = CondMask
   67. store_condition_mask           $10 = CondMask
   68. store_condition_mask           $70 = CondMask
   69. store_condition_mask           $8 = CondMask
   70. copy_slot_unmasked             $9 = EQ
   71. copy_4_slots_unmasked          $71..74 = _1_a[0](0..3)
   72. copy_2_slots_unmasked          $75..76 = _2_b[1](0..1)
   73. cmpne_3_floats                 $71..73 = notEqual($71..73, $74..76)
   74. bitwise_or_int                 $72 |= $73
   75. bitwise_or_int                 $71 |= $72
   76. merge_condition_mask           CondMask = $8 & $9
   77. branch_if_no_active_lanes      branch_if_no_active_lanes +7 (#84)
   78. copy_4_slots_unmasked          $72..75 = _1_a[0](0..3)
   79. copy_2_slots_unmasked          $76..77 = _2_b[1](0..1)
   80. cmpeq_3_floats                 $72..74 = equal($72..74, $75..77)
   81. bitwise_and_int                $73 &= $74
   82. bitwise_and_int                $72 &= $73
   83. copy_slot_masked               $71 = Mask($72)
   84. load_condition_mask            CondMask = $8
   85. zero_slot_unmasked             $11 = 0
   86. merge_condition_mask           CondMask = $70 & $71
   87. branch_if_no_active_lanes      branch_if_no_active_lanes +55 (#142)
   88. store_return_mask              $12 = RetMask
   89. copy_slot_unmasked             $13 = NE
   90. copy_slot_unmasked             eq = $13
   91. copy_slot_unmasked             $13 = F42
   92. copy_slot_unmasked             f1 = $13
   93. copy_slot_unmasked             $13 = ZM
   94. copy_slot_unmasked             f2 = $13
   95. copy_slot_unmasked             $13 = ZP
   96. copy_slot_unmasked             f3 = $13
   97. copy_constant                  $13 = colorGreen(0)
   98. copy_constant                  $14 = 0x3F800000 (1.0)
   99. add_float                      $13 += $14
  100. copy_slot_unmasked             one = $13
  101. zero_3_slots_unmasked          a[0](0..2) = 0
  102. copy_slot_unmasked             $13 = f1
  103. copy_slot_masked               a[0] = Mask($13)
  104. copy_slot_unmasked             $13 = f2
  105. copy_slot_masked               a[1] = Mask($13)
  106. copy_slot_unmasked             $13 = f3
  107. copy_slot_masked               a[2] = Mask($13)
  108. zero_3_slots_unmasked          b[0](0..2) = 0
  109. copy_slot_unmasked             $13 = f1
  110. copy_slot_unmasked             $14 = one
  111. mul_float                      $13 *= $14
  112. copy_slot_masked               b[0] = Mask($13)
  113. copy_slot_unmasked             $13 = f2
  114. copy_slot_unmasked             $14 = one
  115. mul_float                      $13 *= $14
  116. copy_slot_masked               b[1] = Mask($13)
  117. copy_slot_unmasked             $13 = f3
  118. copy_slot_unmasked             $14 = one
  119. mul_float                      $13 *= $14
  120. copy_slot_masked               b[2] = Mask($13)
  121. store_condition_mask           $72 = CondMask
  122. copy_slot_unmasked             $73 = eq
  123. copy_4_slots_unmasked          $13..16 = a[0](0..3)
  124. copy_2_slots_unmasked          $17..18 = b[1](0..1)
  125. cmpne_3_floats                 $13..15 = notEqual($13..15, $16..18)
  126. bitwise_or_int                 $14 |= $15
  127. bitwise_or_int                 $13 |= $14
  128. merge_condition_mask           CondMask = $72 & $73
  129. branch_if_no_active_lanes      branch_if_no_active_lanes +7 (#136)
  130. copy_4_slots_unmasked          $14..17 = a[0](0..3)
  131. copy_2_slots_unmasked          $18..19 = b[1](0..1)
  132. cmpeq_3_floats                 $14..16 = equal($14..16, $17..19)
  133. bitwise_and_int                $15 &= $16
  134. bitwise_and_int                $14 &= $15
  135. copy_slot_masked               $13 = Mask($14)
  136. load_condition_mask            CondMask = $72
  137. copy_slot_masked               [test_same_arrays].result = Mask($13)
  138. load_return_mask               RetMask = $12
  139. copy_slot_unmasked             $12 = [test_same_arrays].result
  140. bitwise_not_int                $12 = ~$12
  141. copy_slot_masked               $11 = Mask($12)
  142. load_condition_mask            CondMask = $70
  143. zero_slot_unmasked             $61 = 0
  144. merge_condition_mask           CondMask = $10 & $11
  145. branch_if_no_active_lanes      branch_if_no_active_lanes +54 (#199)
  146. store_return_mask              $62 = RetMask
  147. copy_slot_unmasked             $63 = NE
  148. copy_slot_unmasked             eq = $63
  149. copy_slot_unmasked             $63 = F42
  150. copy_slot_unmasked             f1 = $63
  151. copy_slot_unmasked             $63 = NAN1
  152. copy_slot_unmasked             f2 = $63
  153. copy_slot_unmasked             $63 = NAN2
  154. copy_slot_unmasked             f3 = $63
  155. copy_constant                  $63 = colorGreen(0)
  156. copy_constant                  $64 = 0x3F800000 (1.0)
  157. add_float                      $63 += $64
  158. copy_slot_unmasked             one = $63
  159. zero_3_slots_unmasked          a[0](0..2) = 0
  160. copy_slot_unmasked             $63 = f1
  161. copy_slot_masked               a[0] = Mask($63)
  162. copy_slot_unmasked             $63 = f2
  163. copy_slot_masked               a[1] = Mask($63)
  164. copy_slot_unmasked             $63 = f3
  165. copy_slot_masked               a[2] = Mask($63)
  166. zero_3_slots_unmasked          b[0](0..2) = 0
  167. copy_slot_unmasked             $63 = f1
  168. copy_slot_unmasked             $64 = one
  169. mul_float                      $63 *= $64
  170. copy_slot_masked               b[0] = Mask($63)
  171. copy_slot_unmasked             $63 = f2
  172. copy_slot_unmasked             $64 = one
  173. mul_float                      $63 *= $64
  174. copy_slot_masked               b[1] = Mask($63)
  175. copy_slot_unmasked             $63 = f3
  176. copy_slot_unmasked             $64 = one
  177. mul_float                      $63 *= $64
  178. copy_slot_masked               b[2] = Mask($63)
  179. store_condition_mask           $12 = CondMask
  180. copy_slot_unmasked             $13 = eq
  181. copy_4_slots_unmasked          $63..66 = a[0](0..3)
  182. copy_2_slots_unmasked          $67..68 = b[1](0..1)
  183. cmpne_3_floats                 $63..65 = notEqual($63..65, $66..68)
  184. bitwise_or_int                 $64 |= $65
  185. bitwise_or_int                 $63 |= $64
  186. merge_condition_mask           CondMask = $12 & $13
  187. branch_if_no_active_lanes      branch_if_no_active_lanes +7 (#194)
  188. copy_4_slots_unmasked          $64..67 = a[0](0..3)
  189. copy_2_slots_unmasked          $68..69 = b[1](0..1)
  190. cmpeq_3_floats                 $64..66 = equal($64..66, $67..69)
  191. bitwise_and_int                $65 &= $66
  192. bitwise_and_int                $64 &= $65
  193. copy_slot_masked               $63 = Mask($64)
  194. load_condition_mask            CondMask = $12
  195. copy_slot_masked               [test_same_arrays].result = Mask($63)
  196. load_return_mask               RetMask = $62
  197. copy_slot_unmasked             $62 = [test_same_arrays].result
  198. copy_slot_masked               $61 = Mask($62)
  199. load_condition_mask            CondMask = $10
  200. zero_slot_unmasked             $79 = 0
  201. merge_condition_mask           CondMask = $60 & $61
  202. branch_if_no_active_lanes      branch_if_no_active_lanes +55 (#257)
  203. store_return_mask              $80 = RetMask
  204. copy_slot_unmasked             $81 = EQ
  205. copy_slot_unmasked             eq = $81
  206. copy_slot_unmasked             $81 = F42
  207. copy_slot_unmasked             f1 = $81
  208. copy_slot_unmasked             $81 = NAN1
  209. copy_slot_unmasked             f2 = $81
  210. copy_slot_unmasked             $81 = NAN2
  211. copy_slot_unmasked             f3 = $81
  212. copy_constant                  $81 = colorGreen(0)
  213. copy_constant                  $82 = 0x3F800000 (1.0)
  214. add_float                      $81 += $82
  215. copy_slot_unmasked             one = $81
  216. zero_3_slots_unmasked          a[0](0..2) = 0
  217. copy_slot_unmasked             $81 = f1
  218. copy_slot_masked               a[0] = Mask($81)
  219. copy_slot_unmasked             $81 = f2
  220. copy_slot_masked               a[1] = Mask($81)
  221. copy_slot_unmasked             $81 = f3
  222. copy_slot_masked               a[2] = Mask($81)
  223. zero_3_slots_unmasked          b[0](0..2) = 0
  224. copy_slot_unmasked             $81 = f1
  225. copy_slot_unmasked             $82 = one
  226. mul_float                      $81 *= $82
  227. copy_slot_masked               b[0] = Mask($81)
  228. copy_slot_unmasked             $81 = f2
  229. copy_slot_unmasked             $82 = one
  230. mul_float                      $81 *= $82
  231. copy_slot_masked               b[1] = Mask($81)
  232. copy_slot_unmasked             $81 = f3
  233. copy_slot_unmasked             $82 = one
  234. mul_float                      $81 *= $82
  235. copy_slot_masked               b[2] = Mask($81)
  236. store_condition_mask           $62 = CondMask
  237. copy_slot_unmasked             $63 = eq
  238. copy_4_slots_unmasked          $81..84 = a[0](0..3)
  239. copy_2_slots_unmasked          $85..86 = b[1](0..1)
  240. cmpne_3_floats                 $81..83 = notEqual($81..83, $84..86)
  241. bitwise_or_int                 $82 |= $83
  242. bitwise_or_int                 $81 |= $82
  243. merge_condition_mask           CondMask = $62 & $63
  244. branch_if_no_active_lanes      branch_if_no_active_lanes +7 (#251)
  245. copy_4_slots_unmasked          $82..85 = a[0](0..3)
  246. copy_2_slots_unmasked          $86..87 = b[1](0..1)
  247. cmpeq_3_floats                 $82..84 = equal($82..84, $85..87)
  248. bitwise_and_int                $83 &= $84
  249. bitwise_and_int                $82 &= $83
  250. copy_slot_masked               $81 = Mask($82)
  251. load_condition_mask            CondMask = $62
  252. copy_slot_masked               [test_same_arrays].result = Mask($81)
  253. load_return_mask               RetMask = $80
  254. copy_slot_unmasked             $80 = [test_same_arrays].result
  255. bitwise_not_int                $80 = ~$80
  256. copy_slot_masked               $79 = Mask($80)
  257. load_condition_mask            CondMask = $60
  258. zero_slot_unmasked             $31 = 0
  259. merge_condition_mask           CondMask = $78 & $79
  260. branch_if_no_active_lanes      branch_if_no_active_lanes +52 (#312)
  261. store_return_mask              $32 = RetMask
  262. copy_slot_unmasked             $33 = NE
  263. copy_slot_unmasked             eq = $33
  264. copy_slot_unmasked             $33 = F42
  265. copy_slot_unmasked             f1 = $33
  266. copy_slot_unmasked             $33 = F43
  267. copy_slot_unmasked             f2 = $33
  268. copy_slot_unmasked             $33 = F44
  269. copy_slot_unmasked             f3 = $33
  270. copy_constant                  $33 = colorGreen(0)
  271. copy_constant                  $34 = 0x40000000 (2.0)
  272. add_float                      $33 += $34
  273. copy_slot_unmasked             two = $33
  274. zero_3_slots_unmasked          a[0](0..2) = 0
  275. copy_slot_unmasked             $33 = f1
  276. copy_slot_masked               a[0] = Mask($33)
  277. copy_slot_unmasked             $33 = f2
  278. copy_slot_masked               a[1] = Mask($33)
  279. copy_slot_unmasked             $33 = f3
  280. copy_slot_masked               a[2] = Mask($33)
  281. zero_3_slots_unmasked          b[0](0..2) = 0
  282. copy_slot_unmasked             $33 = f1
  283. copy_slot_unmasked             $34 = two
  284. mul_float                      $33 *= $34
  285. copy_slot_masked               b[0] = Mask($33)
  286. copy_slot_unmasked             $33 = f2
  287. copy_slot_unmasked             $34 = two
  288. mul_float                      $33 *= $34
  289. copy_slot_masked               b[1] = Mask($33)
  290. copy_slot_unmasked             $33 = f3
  291. copy_slot_masked               b[2] = Mask($33)
  292. store_condition_mask           $80 = CondMask
  293. copy_slot_unmasked             $81 = eq
  294. copy_4_slots_unmasked          $33..36 = a[0](0..3)
  295. copy_2_slots_unmasked          $37..38 = b[1](0..1)
  296. cmpne_3_floats                 $33..35 = notEqual($33..35, $36..38)
  297. bitwise_or_int                 $34 |= $35
  298. bitwise_or_int                 $33 |= $34
  299. merge_condition_mask           CondMask = $80 & $81
  300. branch_if_no_active_lanes      branch_if_no_active_lanes +7 (#307)
  301. copy_4_slots_unmasked          $34..37 = a[0](0..3)
  302. copy_2_slots_unmasked          $38..39 = b[1](0..1)
  303. cmpeq_3_floats                 $34..36 = equal($34..36, $37..39)
  304. bitwise_and_int                $35 &= $36
  305. bitwise_and_int                $34 &= $35
  306. copy_slot_masked               $33 = Mask($34)
  307. load_condition_mask            CondMask = $80
  308. copy_slot_masked               [test_diff_arrays].result = Mask($33)
  309. load_return_mask               RetMask = $32
  310. copy_slot_unmasked             $32 = [test_diff_arrays].result
  311. copy_slot_masked               $31 = Mask($32)
  312. load_condition_mask            CondMask = $78
  313. zero_slot_unmasked             $51 = 0
  314. merge_condition_mask           CondMask = $30 & $31
  315. branch_if_no_active_lanes      branch_if_no_active_lanes +53 (#368)
  316. store_return_mask              $52 = RetMask
  317. copy_slot_unmasked             $53 = EQ
  318. copy_slot_unmasked             eq = $53
  319. copy_slot_unmasked             $53 = F42
  320. copy_slot_unmasked             f1 = $53
  321. copy_slot_unmasked             $53 = F43
  322. copy_slot_unmasked             f2 = $53
  323. copy_slot_unmasked             $53 = F44
  324. copy_slot_unmasked             f3 = $53
  325. copy_constant                  $53 = colorGreen(0)
  326. copy_constant                  $54 = 0x40000000 (2.0)
  327. add_float                      $53 += $54
  328. copy_slot_unmasked             two = $53
  329. zero_3_slots_unmasked          a[0](0..2) = 0
  330. copy_slot_unmasked             $53 = f1
  331. copy_slot_masked               a[0] = Mask($53)
  332. copy_slot_unmasked             $53 = f2
  333. copy_slot_masked               a[1] = Mask($53)
  334. copy_slot_unmasked             $53 = f3
  335. copy_slot_masked               a[2] = Mask($53)
  336. zero_3_slots_unmasked          b[0](0..2) = 0
  337. copy_slot_unmasked             $53 = f1
  338. copy_slot_unmasked             $54 = two
  339. mul_float                      $53 *= $54
  340. copy_slot_masked               b[0] = Mask($53)
  341. copy_slot_unmasked             $53 = f2
  342. copy_slot_unmasked             $54 = two
  343. mul_float                      $53 *= $54
  344. copy_slot_masked               b[1] = Mask($53)
  345. copy_slot_unmasked             $53 = f3
  346. copy_slot_masked               b[2] = Mask($53)
  347. store_condition_mask           $32 = CondMask
  348. copy_slot_unmasked             $33 = eq
  349. copy_4_slots_unmasked          $53..56 = a[0](0..3)
  350. copy_2_slots_unmasked          $57..58 = b[1](0..1)
  351. cmpne_3_floats                 $53..55 = notEqual($53..55, $56..58)
  352. bitwise_or_int                 $54 |= $55
  353. bitwise_or_int                 $53 |= $54
  354. merge_condition_mask           CondMask = $32 & $33
  355. branch_if_no_active_lanes      branch_if_no_active_lanes +7 (#362)
  356. copy_4_slots_unmasked          $54..57 = a[0](0..3)
  357. copy_2_slots_unmasked          $58..59 = b[1](0..1)
  358. cmpeq_3_floats                 $54..56 = equal($54..56, $57..59)
  359. bitwise_and_int                $55 &= $56
  360. bitwise_and_int                $54 &= $55
  361. copy_slot_masked               $53 = Mask($54)
  362. load_condition_mask            CondMask = $32
  363. copy_slot_masked               [test_diff_arrays].result = Mask($53)
  364. load_return_mask               RetMask = $52
  365. copy_slot_unmasked             $52 = [test_diff_arrays].result
  366. bitwise_not_int                $52 = ~$52
  367. copy_slot_masked               $51 = Mask($52)
  368. load_condition_mask            CondMask = $30
  369. zero_slot_unmasked             $41 = 0
  370. merge_condition_mask           CondMask = $50 & $51
  371. branch_if_no_active_lanes      branch_if_no_active_lanes +52 (#423)
  372. store_return_mask              $42 = RetMask
  373. copy_slot_unmasked             $43 = NE
  374. copy_slot_unmasked             eq = $43
  375. copy_slot_unmasked             $43 = NAN1
  376. copy_slot_unmasked             f1 = $43
  377. copy_slot_unmasked             $43 = ZM
  378. copy_slot_unmasked             f2 = $43
  379. copy_slot_unmasked             $43 = ZP
  380. copy_slot_unmasked             f3 = $43
  381. copy_constant                  $43 = colorGreen(0)
  382. copy_constant                  $44 = 0x40000000 (2.0)
  383. add_float                      $43 += $44
  384. copy_slot_unmasked             two = $43
  385. zero_3_slots_unmasked          a[0](0..2) = 0
  386. copy_slot_unmasked             $43 = f1
  387. copy_slot_masked               a[0] = Mask($43)
  388. copy_slot_unmasked             $43 = f2
  389. copy_slot_masked               a[1] = Mask($43)
  390. copy_slot_unmasked             $43 = f3
  391. copy_slot_masked               a[2] = Mask($43)
  392. zero_3_slots_unmasked          b[0](0..2) = 0
  393. copy_slot_unmasked             $43 = f1
  394. copy_slot_unmasked             $44 = two
  395. mul_float                      $43 *= $44
  396. copy_slot_masked               b[0] = Mask($43)
  397. copy_slot_unmasked             $43 = f2
  398. copy_slot_unmasked             $44 = two
  399. mul_float                      $43 *= $44
  400. copy_slot_masked               b[1] = Mask($43)
  401. copy_slot_unmasked             $43 = f3
  402. copy_slot_masked               b[2] = Mask($43)
  403. store_condition_mask           $52 = CondMask
  404. copy_slot_unmasked             $53 = eq
  405. copy_4_slots_unmasked          $43..46 = a[0](0..3)
  406. copy_2_slots_unmasked          $47..48 = b[1](0..1)
  407. cmpne_3_floats                 $43..45 = notEqual($43..45, $46..48)
  408. bitwise_or_int                 $44 |= $45
  409. bitwise_or_int                 $43 |= $44
  410. merge_condition_mask           CondMask = $52 & $53
  411. branch_if_no_active_lanes      branch_if_no_active_lanes +7 (#418)
  412. copy_4_slots_unmasked          $44..47 = a[0](0..3)
  413. copy_2_slots_unmasked          $48..49 = b[1](0..1)
  414. cmpeq_3_floats                 $44..46 = equal($44..46, $47..49)
  415. bitwise_and_int                $45 &= $46
  416. bitwise_and_int                $44 &= $45
  417. copy_slot_masked               $43 = Mask($44)
  418. load_condition_mask            CondMask = $52
  419. copy_slot_masked               [test_diff_arrays].result = Mask($43)
  420. load_return_mask               RetMask = $42
  421. copy_slot_unmasked             $42 = [test_diff_arrays].result
  422. copy_slot_masked               $41 = Mask($42)
  423. load_condition_mask            CondMask = $50
  424. zero_slot_unmasked             $21 = 0
  425. merge_condition_mask           CondMask = $40 & $41
  426. branch_if_no_active_lanes      branch_if_no_active_lanes +53 (#479)
  427. store_return_mask              $22 = RetMask
  428. copy_slot_unmasked             $23 = EQ
  429. copy_slot_unmasked             eq = $23
  430. copy_slot_unmasked             $23 = NAN1
  431. copy_slot_unmasked             f1 = $23
  432. copy_slot_unmasked             $23 = ZM
  433. copy_slot_unmasked             f2 = $23
  434. copy_slot_unmasked             $23 = ZP
  435. copy_slot_unmasked             f3 = $23
  436. copy_constant                  $23 = colorGreen(0)
  437. copy_constant                  $24 = 0x40000000 (2.0)
  438. add_float                      $23 += $24
  439. copy_slot_unmasked             two = $23
  440. zero_3_slots_unmasked          a[0](0..2) = 0
  441. copy_slot_unmasked             $23 = f1
  442. copy_slot_masked               a[0] = Mask($23)
  443. copy_slot_unmasked             $23 = f2
  444. copy_slot_masked               a[1] = Mask($23)
  445. copy_slot_unmasked             $23 = f3
  446. copy_slot_masked               a[2] = Mask($23)
  447. zero_3_slots_unmasked          b[0](0..2) = 0
  448. copy_slot_unmasked             $23 = f1
  449. copy_slot_unmasked             $24 = two
  450. mul_float                      $23 *= $24
  451. copy_slot_masked               b[0] = Mask($23)
  452. copy_slot_unmasked             $23 = f2
  453. copy_slot_unmasked             $24 = two
  454. mul_float                      $23 *= $24
  455. copy_slot_masked               b[1] = Mask($23)
  456. copy_slot_unmasked             $23 = f3
  457. copy_slot_masked               b[2] = Mask($23)
  458. store_condition_mask           $42 = CondMask
  459. copy_slot_unmasked             $43 = eq
  460. copy_4_slots_unmasked          $23..26 = a[0](0..3)
  461. copy_2_slots_unmasked          $27..28 = b[1](0..1)
  462. cmpne_3_floats                 $23..25 = notEqual($23..25, $26..28)
  463. bitwise_or_int                 $24 |= $25
  464. bitwise_or_int                 $23 |= $24
  465. merge_condition_mask           CondMask = $42 & $43
  466. branch_if_no_active_lanes      branch_if_no_active_lanes +7 (#473)
  467. copy_4_slots_unmasked          $24..27 = a[0](0..3)
  468. copy_2_slots_unmasked          $28..29 = b[1](0..1)
  469. cmpeq_3_floats                 $24..26 = equal($24..26, $27..29)
  470. bitwise_and_int                $25 &= $26
  471. bitwise_and_int                $24 &= $25
  472. copy_slot_masked               $23 = Mask($24)
  473. load_condition_mask            CondMask = $42
  474. copy_slot_masked               [test_diff_arrays].result = Mask($23)
  475. load_return_mask               RetMask = $22
  476. copy_slot_unmasked             $22 = [test_diff_arrays].result
  477. bitwise_not_int                $22 = ~$22
  478. copy_slot_masked               $21 = Mask($22)
  479. load_condition_mask            CondMask = $40
  480. copy_4_constants               $0..3 = colorRed
  481. merge_condition_mask           CondMask = $20 & $21
  482. copy_4_constants               $4..7 = colorGreen
  483. copy_4_slots_masked            $0..3 = Mask($4..7)
  484. load_condition_mask            CondMask = $20
  485. copy_4_slots_masked            [main].result = Mask($0..3)
  486. mask_off_return_mask           RetMask &= ~(CondMask & LoopMask & RetMask)
  487. load_src                       src.rgba = [main].result
