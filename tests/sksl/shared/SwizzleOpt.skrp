    1. store_src_rg                   coords = src.rg
    2. init_lane_masks                CondMask = LoopMask = RetMask = true
    3. copy_4_constants               $0..3 = testInputs
    4. copy_4_slots_unmasked          v = $0..3
    5. zero_slot_unmasked             $0 = 0
    6. copy_4_slots_unmasked          $1..4 = v
    7. swizzle_3                      $1..3 = ($1..3).zyx
    8. copy_4_slots_unmasked          v = $0..3
    9. zero_slot_unmasked             $0 = 0
   10. zero_slot_unmasked             $1 = 0
   11. copy_4_slots_unmasked          $2..5 = v
   12. swizzle_1                      $3 = ($3..5).z
   13. copy_4_slots_unmasked          v = $0..3
   14. copy_constant                  $0 = 0x3F800000 (1.0)
   15. copy_constant                  $1 = 0x3F800000 (1.0)
   16. copy_4_slots_unmasked          $2..5 = v
   17. swizzle_2                      $2..3 = ($2..5).wx
   18. copy_4_slots_unmasked          v = $0..3
   19. swizzle_2                      $0..1 = ($0..2).zy
   20. copy_constant                  $2 = 0x3F800000 (1.0)
   21. copy_constant                  $3 = 0x3F800000 (1.0)
   22. copy_4_slots_unmasked          v = $0..3
   23. swizzle_2                      $0..1 = ($0..1).xx
   24. copy_constant                  $2 = 0x3F800000 (1.0)
   25. copy_constant                  $3 = 0x3F800000 (1.0)
   26. copy_4_slots_unmasked          v = $0..3
   27. swizzle_4                      $0..3 = ($0..3).wzwz
   28. copy_4_slots_unmasked          v = $0..3
   29. store_return_mask              $0 = RetMask
   30. copy_4_slots_unmasked          $1..4 = v
   31. copy_4_slots_unmasked          v = $1..4
   32. copy_constant                  x = 0x00000001 (1.401298e-45)
   33. store_loop_mask                $1 = LoopMask
   34. jump                           jump +10 (#44)
   35. zero_slot_unmasked             [for-loop continue mask 0] = 0
   36. copy_slot_unmasked             $2 = v(0)
   37. copy_slot_masked               [fn].result = Mask($2)
   38. mask_off_return_mask           RetMask &= ~(CondMask & LoopMask & RetMask)
   39. reenable_loop_mask             LoopMask |= [for-loop continue mask 0]
   40. copy_slot_unmasked             $2 = x
   41. copy_constant                  $3 = 0x00000001 (1.401298e-45)
   42. add_int                        $2 += $3
   43. copy_slot_masked               x = Mask($2)
   44. copy_slot_unmasked             $2 = x
   45. copy_constant                  $3 = 0x00000002 (2.802597e-45)
   46. cmple_int                      $2 = lessThanEqual($2, $3)
   47. merge_loop_mask                LoopMask &= $2
   48. stack_rewind
   49. branch_if_any_active_lanes     branch_if_any_active_lanes -14 (#35)
   50. load_loop_mask                 LoopMask = $1
   51. load_return_mask               RetMask = $0
   52. copy_slot_unmasked             $0 = [fn].result
   53. copy_constant                  $1 = 0x42F60000 (123.0)
   54. copy_constant                  $2 = 0x43E40000 (456.0)
   55. swizzle_4                      $0..3 = ($0..3).yyzz
   56. copy_4_slots_unmasked          v = $0..3
   57. store_return_mask              $0 = RetMask
   58. copy_4_slots_unmasked          $1..4 = v
   59. copy_4_slots_unmasked          v = $1..4
   60. copy_constant                  x = 0x00000001 (1.401298e-45)
   61. store_loop_mask                $1 = LoopMask
   62. jump                           jump +10 (#72)
   63. zero_slot_unmasked             [for-loop continue mask 1] = 0
   64. copy_slot_unmasked             $2 = v(0)
   65. copy_slot_masked               [fn].result = Mask($2)
   66. mask_off_return_mask           RetMask &= ~(CondMask & LoopMask & RetMask)
   67. reenable_loop_mask             LoopMask |= [for-loop continue mask 1]
   68. copy_slot_unmasked             $2 = x
   69. copy_constant                  $3 = 0x00000001 (1.401298e-45)
   70. add_int                        $2 += $3
   71. copy_slot_masked               x = Mask($2)
   72. copy_slot_unmasked             $2 = x
   73. copy_constant                  $3 = 0x00000002 (2.802597e-45)
   74. cmple_int                      $2 = lessThanEqual($2, $3)
   75. merge_loop_mask                LoopMask &= $2
   76. stack_rewind
   77. branch_if_any_active_lanes     branch_if_any_active_lanes -14 (#63)
   78. load_loop_mask                 LoopMask = $1
   79. load_return_mask               RetMask = $0
   80. copy_slot_unmasked             $0 = [fn].result
   81. copy_constant                  $1 = 0x42F60000 (123.0)
   82. copy_constant                  $2 = 0x43E40000 (456.0)
   83. swizzle_4                      $0..3 = ($0..3).yyzz
   84. copy_4_slots_unmasked          v = $0..3
   85. copy_constant                  $0 = 0x42F60000 (123.0)
   86. copy_constant                  $1 = 0x43E40000 (456.0)
   87. copy_constant                  $2 = 0x43E40000 (456.0)
   88. store_return_mask              $3 = RetMask
   89. copy_4_slots_unmasked          $4..7 = v
   90. copy_4_slots_unmasked          v = $4..7
   91. copy_constant                  x = 0x00000001 (1.401298e-45)
   92. store_loop_mask                $4 = LoopMask
   93. jump                           jump +10 (#103)
   94. zero_slot_unmasked             [for-loop continue mask 2] = 0
   95. copy_slot_unmasked             $5 = v(0)
   96. copy_slot_masked               [fn].result = Mask($5)
   97. mask_off_return_mask           RetMask &= ~(CondMask & LoopMask & RetMask)
   98. reenable_loop_mask             LoopMask |= [for-loop continue mask 2]
   99. copy_slot_unmasked             $5 = x
  100. copy_constant                  $6 = 0x00000001 (1.401298e-45)
  101. add_int                        $5 += $6
  102. copy_slot_masked               x = Mask($5)
  103. copy_slot_unmasked             $5 = x
  104. copy_constant                  $6 = 0x00000002 (2.802597e-45)
  105. cmple_int                      $5 = lessThanEqual($5, $6)
  106. merge_loop_mask                LoopMask &= $5
  107. stack_rewind
  108. branch_if_any_active_lanes     branch_if_any_active_lanes -14 (#94)
  109. load_loop_mask                 LoopMask = $4
  110. load_return_mask               RetMask = $3
  111. copy_slot_unmasked             $3 = [fn].result
  112. copy_4_slots_unmasked          v = $0..3
  113. copy_constant                  $0 = 0x42F60000 (123.0)
  114. copy_constant                  $1 = 0x43E40000 (456.0)
  115. copy_constant                  $2 = 0x43E40000 (456.0)
  116. store_return_mask              $3 = RetMask
  117. copy_4_slots_unmasked          $4..7 = v
  118. copy_4_slots_unmasked          v = $4..7
  119. copy_constant                  x = 0x00000001 (1.401298e-45)
  120. store_loop_mask                $4 = LoopMask
  121. jump                           jump +10 (#131)
  122. zero_slot_unmasked             [for-loop continue mask 3] = 0
  123. copy_slot_unmasked             $5 = v(0)
  124. copy_slot_masked               [fn].result = Mask($5)
  125. mask_off_return_mask           RetMask &= ~(CondMask & LoopMask & RetMask)
  126. reenable_loop_mask             LoopMask |= [for-loop continue mask 3]
  127. copy_slot_unmasked             $5 = x
  128. copy_constant                  $6 = 0x00000001 (1.401298e-45)
  129. add_int                        $5 += $6
  130. copy_slot_masked               x = Mask($5)
  131. copy_slot_unmasked             $5 = x
  132. copy_constant                  $6 = 0x00000002 (2.802597e-45)
  133. cmple_int                      $5 = lessThanEqual($5, $6)
  134. merge_loop_mask                LoopMask &= $5
  135. stack_rewind
  136. branch_if_any_active_lanes     branch_if_any_active_lanes -14 (#122)
  137. load_loop_mask                 LoopMask = $4
  138. load_return_mask               RetMask = $3
  139. copy_slot_unmasked             $3 = [fn].result
  140. copy_4_slots_unmasked          v = $0..3
  141. store_return_mask              $0 = RetMask
  142. copy_4_slots_unmasked          $1..4 = v
  143. copy_4_slots_unmasked          v = $1..4
  144. copy_constant                  x = 0x00000001 (1.401298e-45)
  145. store_loop_mask                $1 = LoopMask
  146. jump                           jump +10 (#156)
  147. zero_slot_unmasked             [for-loop continue mask 4] = 0
  148. copy_slot_unmasked             $2 = v(0)
  149. copy_slot_masked               [fn].result = Mask($2)
  150. mask_off_return_mask           RetMask &= ~(CondMask & LoopMask & RetMask)
  151. reenable_loop_mask             LoopMask |= [for-loop continue mask 4]
  152. copy_slot_unmasked             $2 = x
  153. copy_constant                  $3 = 0x00000001 (1.401298e-45)
  154. add_int                        $2 += $3
  155. copy_slot_masked               x = Mask($2)
  156. copy_slot_unmasked             $2 = x
  157. copy_constant                  $3 = 0x00000002 (2.802597e-45)
  158. cmple_int                      $2 = lessThanEqual($2, $3)
  159. merge_loop_mask                LoopMask &= $2
  160. stack_rewind
  161. branch_if_any_active_lanes     branch_if_any_active_lanes -14 (#147)
  162. load_loop_mask                 LoopMask = $1
  163. load_return_mask               RetMask = $0
  164. copy_slot_unmasked             $0 = [fn].result
  165. copy_constant                  $1 = 0x42F60000 (123.0)
  166. copy_constant                  $2 = 0x43E40000 (456.0)
  167. swizzle_4                      $0..3 = ($0..3).yxxz
  168. copy_4_slots_unmasked          v = $0..3
  169. store_return_mask              $0 = RetMask
  170. copy_4_slots_unmasked          $1..4 = v
  171. copy_4_slots_unmasked          v = $1..4
  172. copy_constant                  x = 0x00000001 (1.401298e-45)
  173. store_loop_mask                $1 = LoopMask
  174. jump                           jump +10 (#184)
  175. zero_slot_unmasked             [for-loop continue mask 5] = 0
  176. copy_slot_unmasked             $2 = v(0)
  177. copy_slot_masked               [fn].result = Mask($2)
  178. mask_off_return_mask           RetMask &= ~(CondMask & LoopMask & RetMask)
  179. reenable_loop_mask             LoopMask |= [for-loop continue mask 5]
  180. copy_slot_unmasked             $2 = x
  181. copy_constant                  $3 = 0x00000001 (1.401298e-45)
  182. add_int                        $2 += $3
  183. copy_slot_masked               x = Mask($2)
  184. copy_slot_unmasked             $2 = x
  185. copy_constant                  $3 = 0x00000002 (2.802597e-45)
  186. cmple_int                      $2 = lessThanEqual($2, $3)
  187. merge_loop_mask                LoopMask &= $2
  188. stack_rewind
  189. branch_if_any_active_lanes     branch_if_any_active_lanes -14 (#175)
  190. load_loop_mask                 LoopMask = $1
  191. load_return_mask               RetMask = $0
  192. copy_slot_unmasked             $0 = [fn].result
  193. copy_constant                  $1 = 0x42F60000 (123.0)
  194. copy_constant                  $2 = 0x43E40000 (456.0)
  195. swizzle_4                      $0..3 = ($0..3).yxxz
  196. copy_4_slots_unmasked          v = $0..3
  197. copy_constant                  $0 = 0x3F800000 (1.0)
  198. copy_constant                  $1 = 0x3F800000 (1.0)
  199. copy_constant                  $2 = 0x40000000 (2.0)
  200. copy_constant                  $3 = 0x40400000 (3.0)
  201. copy_4_slots_unmasked          v = $0..3
  202. copy_3_constants               $0..2 = colorRed(0..2)
  203. copy_constant                  $3 = 0x3F800000 (1.0)
  204. copy_4_slots_unmasked          v = $0..3
  205. copy_constant                  $0 = colorRed(0)
  206. copy_constant                  $1 = 0x3F800000 (1.0)
  207. copy_2_constants               $2..3 = colorRed(1..2)
  208. copy_4_slots_unmasked          v = $0..3
  209. copy_slot_unmasked             v(3) = $0
  210. copy_slot_unmasked             v(2) = $1
  211. copy_slot_unmasked             v(1) = $2
  212. copy_slot_unmasked             v(0) = $3
  213. copy_2_slots_unmasked          $0..1 = v(1..2)
  214. copy_slot_unmasked             v(0) = $0
  215. copy_slot_unmasked             v(3) = $1
  216. copy_4_slots_unmasked          $0..3 = v
  217. swizzle_2                      $0..1 = ($0..3).ww
  218. copy_constant                  $2 = 0x3F800000 (1.0)
  219. copy_slot_unmasked             v(2) = $0
  220. copy_slot_unmasked             v(1) = $1
  221. copy_slot_unmasked             v(0) = $2
  222. store_condition_mask           $8 = CondMask
  223. copy_4_slots_unmasked          $9..12 = v
  224. copy_constant                  $13 = 0x3F800000 (1.0)
  225. swizzle_4                      $13..16 = ($13..16).xxxx
  226. cmpeq_4_floats                 $9..12 = equal($9..12, $13..16)
  227. bitwise_and_2_ints             $9..10 &= $11..12
  228. bitwise_and_int                $9 &= $10
  229. copy_4_constants               $0..3 = colorRed
  230. merge_condition_mask           CondMask = $8 & $9
  231. copy_4_constants               $4..7 = colorGreen
  232. copy_4_slots_masked            $0..3 = Mask($4..7)
  233. load_condition_mask            CondMask = $8
  234. copy_4_slots_unmasked          [main].result = $0..3
  235. load_src                       src.rgba = [main].result
